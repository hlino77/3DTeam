// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr S_TIME::S_TIME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : isendtick_(uint64_t{0u})
  , iserverminute_(0u)
  , fserversecond_(0){}
struct S_TIMEDefaultTypeInternal {
  constexpr S_TIMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_TIMEDefaultTypeInternal() {}
  union {
    S_TIME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_TIMEDefaultTypeInternal _S_TIME_default_instance_;
constexpr S_LOGIN::S_LOGIN(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strnickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iclass_(0){}
struct S_LOGINDefaultTypeInternal {
  constexpr S_LOGINDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
constexpr S_OPEN_LEVEL::S_OPEN_LEVEL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ilevelid_(uint64_t{0u}){}
struct S_OPEN_LEVELDefaultTypeInternal {
  constexpr S_OPEN_LEVELDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_OPEN_LEVELDefaultTypeInternal() {}
  union {
    S_OPEN_LEVEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_OPEN_LEVELDefaultTypeInternal _S_OPEN_LEVEL_default_instance_;
constexpr S_LEVEL_STATE::S_LEVEL_STATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ilevelstate_(0u){}
struct S_LEVEL_STATEDefaultTypeInternal {
  constexpr S_LEVEL_STATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_LEVEL_STATEDefaultTypeInternal() {}
  union {
    S_LEVEL_STATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_LEVEL_STATEDefaultTypeInternal _S_LEVEL_STATE_default_instance_;
constexpr S_CREATE_OBJCECT::S_CREATE_OBJCECT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vpos_()
  , tmonsterinfo_()
  , strname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iobjectid_(0)
  , iobjecttype_(0u)
  , ilevel_(0u)
  , ilayer_(0u)
  , bcontroll_(false){}
struct S_CREATE_OBJCECTDefaultTypeInternal {
  constexpr S_CREATE_OBJCECTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CREATE_OBJCECTDefaultTypeInternal() {}
  union {
    S_CREATE_OBJCECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CREATE_OBJCECTDefaultTypeInternal _S_CREATE_OBJCECT_default_instance_;
constexpr S_CHARACTER_NAME::S_CHARACTER_NAME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct S_CHARACTER_NAMEDefaultTypeInternal {
  constexpr S_CHARACTER_NAMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHARACTER_NAMEDefaultTypeInternal() {}
  union {
    S_CHARACTER_NAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHARACTER_NAMEDefaultTypeInternal _S_CHARACTER_NAME_default_instance_;
constexpr S_MATRIX::S_MATRIX(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_()
  , iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0){}
struct S_MATRIXDefaultTypeInternal {
  constexpr S_MATRIXDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MATRIXDefaultTypeInternal() {}
  union {
    S_MATRIX _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MATRIXDefaultTypeInternal _S_MATRIX_default_instance_;
constexpr S_ANIMATION::S_ANIMATION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0)
  , ianimindex_(0)
  , fchangetime_(0)
  , istartframe_(0)
  , ichangeframe_(0){}
struct S_ANIMATIONDefaultTypeInternal {
  constexpr S_ANIMATIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_ANIMATIONDefaultTypeInternal() {}
  union {
    S_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_ANIMATIONDefaultTypeInternal _S_ANIMATION_default_instance_;
constexpr S_OBJECTINFO::S_OBJECTINFO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tobject_(){}
struct S_OBJECTINFODefaultTypeInternal {
  constexpr S_OBJECTINFODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_OBJECTINFODefaultTypeInternal() {}
  union {
    S_OBJECTINFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_OBJECTINFODefaultTypeInternal _S_OBJECTINFO_default_instance_;
constexpr S_STATE::S_STATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strstate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tobject_(nullptr)
  , itargetobjectlayer_(0)
  , itargetobjectid_(0)
  , ihitobjectlayer_(0)
  , ihitobjectid_(0)
  , iweaponindex_(0){}
struct S_STATEDefaultTypeInternal {
  constexpr S_STATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_STATEDefaultTypeInternal() {}
  union {
    S_STATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_STATEDefaultTypeInternal _S_STATE_default_instance_;
constexpr S_COLLIDERSTATE::S_COLLIDERSTATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voffset_()
  , tchild_()
  , iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0)
  , icollayer_(0)
  , fradius_(0)
  , iattacktype_(0)
  , bactive_(false)
  , bslow_(false)
  , iattack_(0){}
struct S_COLLIDERSTATEDefaultTypeInternal {
  constexpr S_COLLIDERSTATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_COLLIDERSTATEDefaultTypeInternal() {}
  union {
    S_COLLIDERSTATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_COLLIDERSTATEDefaultTypeInternal _S_COLLIDERSTATE_default_instance_;
constexpr S_COLLISION::S_COLLISION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vhitpos_()
  , iobjectid_(0)
  , ilevel_(0)
  , idamage_(int64_t{0})
  , ilayer_(0)
  , istatuseffect_(0)
  , fforce_(0)
  , fduration_(0){}
struct S_COLLISIONDefaultTypeInternal {
  constexpr S_COLLISIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_COLLISIONDefaultTypeInternal() {}
  union {
    S_COLLISION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_COLLISIONDefaultTypeInternal _S_COLLISION_default_instance_;
constexpr S_NICKNAME::S_NICKNAME(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strnickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct S_NICKNAMEDefaultTypeInternal {
  constexpr S_NICKNAMEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_NICKNAMEDefaultTypeInternal() {}
  union {
    S_NICKNAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_NICKNAMEDefaultTypeInternal _S_NICKNAME_default_instance_;
constexpr S_USERINFO::S_USERINFO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tuser_(){}
struct S_USERINFODefaultTypeInternal {
  constexpr S_USERINFODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_USERINFODefaultTypeInternal() {}
  union {
    S_USERINFO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_USERINFODefaultTypeInternal _S_USERINFO_default_instance_;
constexpr S_NEARTARGET::S_NEARTARGET(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0)
  , itargetobjectlayer_(0)
  , itargetobjectid_(0){}
struct S_NEARTARGETDefaultTypeInternal {
  constexpr S_NEARTARGETDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_NEARTARGETDefaultTypeInternal() {}
  union {
    S_NEARTARGET _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_NEARTARGETDefaultTypeInternal _S_NEARTARGET_default_instance_;
constexpr S_SETSKILL::S_SETSKILL(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : szskillname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0)
  , iskillobjectid_(0){}
struct S_SETSKILLDefaultTypeInternal {
  constexpr S_SETSKILLDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SETSKILLDefaultTypeInternal() {}
  union {
    S_SETSKILL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SETSKILLDefaultTypeInternal _S_SETSKILL_default_instance_;
constexpr S_SLOWMOTION::S_SLOWMOTION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0)
  , bslow_(false){}
struct S_SLOWMOTIONDefaultTypeInternal {
  constexpr S_SLOWMOTIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SLOWMOTIONDefaultTypeInternal() {}
  union {
    S_SLOWMOTION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SLOWMOTIONDefaultTypeInternal _S_SLOWMOTION_default_instance_;
constexpr S_CAMSHAKE::S_CAMSHAKE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fcamshake_(0)
  , fshaketime_(0){}
struct S_CAMSHAKEDefaultTypeInternal {
  constexpr S_CAMSHAKEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CAMSHAKEDefaultTypeInternal() {}
  union {
    S_CAMSHAKE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CAMSHAKEDefaultTypeInternal _S_CAMSHAKE_default_instance_;
constexpr S_EVENT::S_EVENT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ieventid_(0)
  , istate_(0){}
struct S_EVENTDefaultTypeInternal {
  constexpr S_EVENTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_EVENTDefaultTypeInternal() {}
  union {
    S_EVENT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_EVENTDefaultTypeInternal _S_EVENT_default_instance_;
constexpr S_SKILLEXPLOSION::S_SKILLEXPLOSION(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tobject_(nullptr){}
struct S_SKILLEXPLOSIONDefaultTypeInternal {
  constexpr S_SKILLEXPLOSIONDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_SKILLEXPLOSIONDefaultTypeInternal() {}
  union {
    S_SKILLEXPLOSION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_SKILLEXPLOSIONDefaultTypeInternal _S_SKILLEXPLOSION_default_instance_;
constexpr S_HP::S_HP(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0)
  , ihp_(0){}
struct S_HPDefaultTypeInternal {
  constexpr S_HPDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_HPDefaultTypeInternal() {}
  union {
    S_HP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_HPDefaultTypeInternal _S_HP_default_instance_;
constexpr S_CREATE_PLAYER::S_CREATE_PLAYER(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matworld_()
  , vtargetpos_()
  , strnickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strstate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iobjectid_(0)
  , ilevel_(0)
  , iclass_(0)
  , bcontroll_(false)
  , iweaponindex_(0){}
struct S_CREATE_PLAYERDefaultTypeInternal {
  constexpr S_CREATE_PLAYERDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CREATE_PLAYERDefaultTypeInternal() {}
  union {
    S_CREATE_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CREATE_PLAYERDefaultTypeInternal _S_CREATE_PLAYER_default_instance_;
constexpr S_CHAT::S_CHAT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : szchat_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct S_CHATDefaultTypeInternal {
  constexpr S_CHATDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
constexpr S_MONSTERSTATE::S_MONSTERSTATE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vtargetpos_()
  , strstate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , iobjectid_(0)
  , ilevel_(0)
  , itargetobjectlayer_(0)
  , itargetobjectid_(0){}
struct S_MONSTERSTATEDefaultTypeInternal {
  constexpr S_MONSTERSTATEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_MONSTERSTATEDefaultTypeInternal() {}
  union {
    S_MONSTERSTATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_MONSTERSTATEDefaultTypeInternal _S_MONSTERSTATE_default_instance_;
constexpr S_PLAYERLEVELMOVE::S_PLAYERLEVELMOVE(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : icurrlevel_(0)
  , inextlevel_(0){}
struct S_PLAYERLEVELMOVEDefaultTypeInternal {
  constexpr S_PLAYERLEVELMOVEDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_PLAYERLEVELMOVEDefaultTypeInternal() {}
  union {
    S_PLAYERLEVELMOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_PLAYERLEVELMOVEDefaultTypeInternal _S_PLAYERLEVELMOVE_default_instance_;
constexpr S_DELETEGAMEOBJECT::S_DELETEGAMEOBJECT(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iobjectid_(0)
  , ilevel_(0)
  , ilayer_(0){}
struct S_DELETEGAMEOBJECTDefaultTypeInternal {
  constexpr S_DELETEGAMEOBJECTDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~S_DELETEGAMEOBJECTDefaultTypeInternal() {}
  union {
    S_DELETEGAMEOBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT S_DELETEGAMEOBJECTDefaultTypeInternal _S_DELETEGAMEOBJECT_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Protocol_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, isendtick_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, iserverminute_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_TIME, fserversecond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, strnickname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, iclass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OPEN_LEVEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OPEN_LEVEL, ilevelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEVEL_STATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEVEL_STATE, ilevelstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, iobjecttype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, strname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, bcontroll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, vpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_OBJCECT, tmonsterinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHARACTER_NAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHARACTER_NAME, strname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MATRIX, matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ianimindex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, fchangetime_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, istartframe_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, ichangeframe_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJECTINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_OBJECTINFO, tobject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, tobject_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, strstate_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, itargetobjectlayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, itargetobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, ihitobjectlayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, ihitobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_STATE, iweaponindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, icollayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, fradius_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, voffset_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, bactive_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, iattacktype_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, iattack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, bslow_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLIDERSTATE, tchild_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, idamage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, vhitpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, istatuseffect_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, fforce_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_COLLISION, fduration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NICKNAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NICKNAME, strnickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_USERINFO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_USERINFO, tuser_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NEARTARGET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NEARTARGET, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NEARTARGET, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NEARTARGET, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NEARTARGET, itargetobjectlayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_NEARTARGET, itargetobjectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SETSKILL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SETSKILL, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SETSKILL, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SETSKILL, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SETSKILL, szskillname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SETSKILL, iskillobjectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SLOWMOTION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SLOWMOTION, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SLOWMOTION, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SLOWMOTION, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SLOWMOTION, bslow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CAMSHAKE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CAMSHAKE, fcamshake_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CAMSHAKE, fshaketime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EVENT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EVENT, ieventid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EVENT, istate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SKILLEXPLOSION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SKILLEXPLOSION, tobject_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HP, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HP, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HP, ilayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_HP, ihp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, iclass_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, bcontroll_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, matworld_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, strnickname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, vtargetpos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, strstate_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_PLAYER, iweaponindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, szchat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTERSTATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTERSTATE, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTERSTATE, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTERSTATE, strstate_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTERSTATE, itargetobjectlayer_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTERSTATE, itargetobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MONSTERSTATE, vtargetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERLEVELMOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERLEVELMOVE, icurrlevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PLAYERLEVELMOVE, inextlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DELETEGAMEOBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DELETEGAMEOBJECT, iobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DELETEGAMEOBJECT, ilevel_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DELETEGAMEOBJECT, ilayer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::S_TIME)},
  { 8, -1, sizeof(::Protocol::S_LOGIN)},
  { 15, -1, sizeof(::Protocol::S_OPEN_LEVEL)},
  { 21, -1, sizeof(::Protocol::S_LEVEL_STATE)},
  { 27, -1, sizeof(::Protocol::S_CREATE_OBJCECT)},
  { 40, -1, sizeof(::Protocol::S_CHARACTER_NAME)},
  { 46, -1, sizeof(::Protocol::S_MATRIX)},
  { 55, -1, sizeof(::Protocol::S_ANIMATION)},
  { 67, -1, sizeof(::Protocol::S_OBJECTINFO)},
  { 73, -1, sizeof(::Protocol::S_STATE)},
  { 85, -1, sizeof(::Protocol::S_COLLIDERSTATE)},
  { 101, -1, sizeof(::Protocol::S_COLLISION)},
  { 114, -1, sizeof(::Protocol::S_NICKNAME)},
  { 120, -1, sizeof(::Protocol::S_USERINFO)},
  { 126, -1, sizeof(::Protocol::S_NEARTARGET)},
  { 136, -1, sizeof(::Protocol::S_SETSKILL)},
  { 146, -1, sizeof(::Protocol::S_SLOWMOTION)},
  { 155, -1, sizeof(::Protocol::S_CAMSHAKE)},
  { 162, -1, sizeof(::Protocol::S_EVENT)},
  { 169, -1, sizeof(::Protocol::S_SKILLEXPLOSION)},
  { 175, -1, sizeof(::Protocol::S_HP)},
  { 184, -1, sizeof(::Protocol::S_CREATE_PLAYER)},
  { 198, -1, sizeof(::Protocol::S_CHAT)},
  { 204, -1, sizeof(::Protocol::S_MONSTERSTATE)},
  { 215, -1, sizeof(::Protocol::S_PLAYERLEVELMOVE)},
  { 222, -1, sizeof(::Protocol::S_DELETEGAMEOBJECT)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_TIME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_OPEN_LEVEL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_LEVEL_STATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CREATE_OBJCECT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHARACTER_NAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_MATRIX_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_ANIMATION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_OBJECTINFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_STATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_COLLIDERSTATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_COLLISION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_NICKNAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_USERINFO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_NEARTARGET_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SETSKILL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SLOWMOTION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CAMSHAKE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_EVENT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_SKILLEXPLOSION_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_HP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CREATE_PLAYER_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_CHAT_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_MONSTERSTATE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_PLAYERLEVELMOVE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_S_DELETEGAMEOBJECT_default_instance_),
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"I\n\006S_TIME\022\021\n\tiSendTick\030\001 \001("
  "\004\022\025\n\riServerMinute\030\002 \001(\r\022\025\n\rfServerSecon"
  "d\030\003 \001(\002\".\n\007S_LOGIN\022\023\n\013strNickName\030\001 \001(\014\022"
  "\016\n\006iClass\030\002 \001(\005\" \n\014S_OPEN_LEVEL\022\020\n\010iLeve"
  "lID\030\001 \001(\004\"$\n\rS_LEVEL_STATE\022\023\n\013iLevelStat"
  "e\030\001 \001(\r\"\303\001\n\020S_CREATE_OBJCECT\022\021\n\tiObjectI"
  "D\030\001 \001(\005\022\023\n\013iObjectType\030\002 \001(\r\022\016\n\006iLevel\030\003"
  " \001(\r\022\016\n\006iLayer\030\004 \001(\r\022\017\n\007strName\030\005 \001(\t\022\021\n"
  "\tbControll\030\006 \001(\010\022\020\n\004vPos\030\007 \003(\002B\002\020\001\0221\n\014tM"
  "onsterInfo\030\010 \003(\0132\033.Protocol.MonsterCreat"
  "eInfo\"#\n\020S_CHARACTER_NAME\022\017\n\007strName\030\001 \001"
  "(\t\"Q\n\010S_MATRIX\022\021\n\tiObjectID\030\001 \001(\005\022\016\n\006iLe"
  "vel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\022\n\006Matrix\030\004 \003("
  "\002B\002\020\001\"\224\001\n\013S_ANIMATION\022\021\n\tiObjectID\030\001 \001(\005"
  "\022\016\n\006iLevel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\022\n\niAni"
  "mIndex\030\004 \001(\005\022\023\n\013fChangeTime\030\005 \001(\002\022\023\n\013iSt"
  "artFrame\030\006 \001(\005\022\024\n\014iChangeFrame\030\007 \001(\005\"5\n\014"
  "S_OBJECTINFO\022%\n\007tObject\030\001 \003(\0132\024.Protocol"
  ".ObjectInfo\"\274\001\n\007S_STATE\022%\n\007tObject\030\001 \001(\013"
  "2\024.Protocol.ObjectInfo\022\020\n\010strState\030\002 \001(\t"
  "\022\032\n\022iTargetObjectLayer\030\003 \001(\005\022\027\n\017iTargetO"
  "bjectID\030\004 \001(\005\022\027\n\017iHitObjectLayer\030\005 \001(\005\022\024"
  "\n\014iHitObjectID\030\006 \001(\005\022\024\n\014iWeaponIndex\030\007 \001"
  "(\005\"\354\001\n\017S_COLLIDERSTATE\022\021\n\tiObjectID\030\001 \001("
  "\005\022\016\n\006iLevel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\021\n\tiCo"
  "lLayer\030\004 \001(\005\022\017\n\007fRadius\030\005 \001(\002\022\023\n\007vOffset"
  "\030\006 \003(\002B\002\020\001\022\017\n\007bActive\030\007 \001(\010\022\023\n\013iAttackTy"
  "pe\030\010 \001(\005\022\017\n\007iAttack\030\t \001(\005\022\r\n\005bSlow\030\n \001(\010"
  "\022\'\n\006tChild\030\013 \003(\0132\027.Protocol.ChildCollide"
  "r\"\240\001\n\013S_COLLISION\022\021\n\tiObjectID\030\001 \001(\005\022\016\n\006"
  "iLevel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\017\n\007iDamage\030"
  "\004 \001(\003\022\023\n\007vHitPos\030\005 \003(\002B\002\020\001\022\025\n\riStatusEff"
  "ect\030\006 \001(\005\022\016\n\006fForce\030\007 \001(\002\022\021\n\tfDuration\030\010"
  " \001(\002\"!\n\nS_NICKNAME\022\023\n\013strNickName\030\001 \001(\014\""
  "/\n\nS_USERINFO\022!\n\005tUser\030\001 \003(\0132\022.Protocol."
  "UserInfo\"v\n\014S_NEARTARGET\022\021\n\tiObjectID\030\001 "
  "\001(\005\022\016\n\006iLevel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\032\n\022i"
  "TargetObjectLayer\030\004 \001(\005\022\027\n\017iTargetObject"
  "ID\030\005 \001(\005\"l\n\nS_SETSKILL\022\021\n\tiObjectID\030\001 \001("
  "\005\022\016\n\006iLevel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\023\n\013szS"
  "killName\030\004 \001(\t\022\026\n\016iSkillObjectID\030\005 \001(\005\"P"
  "\n\014S_SLOWMOTION\022\021\n\tiObjectID\030\001 \001(\005\022\016\n\006iLe"
  "vel\030\002 \001(\005\022\016\n\006iLayer\030\003 \001(\005\022\r\n\005bSlow\030\004 \001(\010"
  "\"3\n\nS_CAMSHAKE\022\021\n\tfCamShake\030\001 \001(\002\022\022\n\nfSh"
  "akeTime\030\002 \001(\002\"+\n\007S_EVENT\022\020\n\010iEventID\030\001 \001"
  "(\005\022\016\n\006iState\030\002 \001(\005\"9\n\020S_SKILLEXPLOSION\022%"
  "\n\007tObject\030\001 \001(\0132\024.Protocol.ObjectInfo\"F\n"
  "\004S_HP\022\021\n\tiObjectID\030\001 \001(\005\022\016\n\006iLevel\030\002 \001(\005"
  "\022\016\n\006iLayer\030\003 \001(\005\022\013\n\003iHP\030\004 \001(\005\"\302\001\n\017S_CREA"
  "TE_PLAYER\022\021\n\tiObjectID\030\001 \001(\005\022\016\n\006iLevel\030\002"
  " \001(\005\022\016\n\006iClass\030\003 \001(\005\022\021\n\tbControll\030\004 \001(\010\022"
  "\024\n\010matWorld\030\005 \003(\002B\002\020\001\022\023\n\013strNickName\030\006 \001"
  "(\014\022\026\n\nvTargetPos\030\007 \003(\002B\002\020\001\022\020\n\010strState\030\010"
  " \001(\t\022\024\n\014iWeaponIndex\030\t \001(\005\"\030\n\006S_CHAT\022\016\n\006"
  "szChat\030\001 \001(\014\"\222\001\n\016S_MONSTERSTATE\022\021\n\tiObje"
  "ctID\030\001 \001(\005\022\016\n\006iLevel\030\002 \001(\005\022\020\n\010strState\030\003"
  " \001(\t\022\032\n\022iTargetObjectLayer\030\004 \001(\005\022\027\n\017iTar"
  "getObjectID\030\005 \001(\005\022\026\n\nvTargetPos\030\006 \003(\002B\002\020"
  "\001\";\n\021S_PLAYERLEVELMOVE\022\022\n\niCurrLevel\030\001 \001"
  "(\005\022\022\n\niNextLevel\030\002 \001(\005\"G\n\022S_DELETEGAMEOB"
  "JECT\022\021\n\tiObjectID\030\001 \001(\005\022\016\n\006iLevel\030\002 \001(\005\022"
  "\016\n\006iLayer\030\003 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Protocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto = {
  false, false, 2503, descriptor_table_protodef_Protocol_2eproto, "Protocol.proto", 
  &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 26,
  schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
  file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto, file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class S_TIME::_Internal {
 public:
};

S_TIME::S_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_TIME)
}
S_TIME::S_TIME(const S_TIME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&isendtick_, &from.isendtick_,
    static_cast<size_t>(reinterpret_cast<char*>(&fserversecond_) -
    reinterpret_cast<char*>(&isendtick_)) + sizeof(fserversecond_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_TIME)
}

void S_TIME::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&isendtick_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fserversecond_) -
    reinterpret_cast<char*>(&isendtick_)) + sizeof(fserversecond_));
}

S_TIME::~S_TIME() {
  // @@protoc_insertion_point(destructor:Protocol.S_TIME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_TIME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_TIME::ArenaDtor(void* object) {
  S_TIME* _this = reinterpret_cast< S_TIME* >(object);
  (void)_this;
}
void S_TIME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_TIME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_TIME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isendtick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fserversecond_) -
      reinterpret_cast<char*>(&isendtick_)) + sizeof(fserversecond_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_TIME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iSendTick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isendtick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iServerMinute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iserverminute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fServerSecond = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fserversecond_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_TIME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_TIME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iSendTick = 1;
  if (this->isendtick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_isendtick(), target);
  }

  // uint32 iServerMinute = 2;
  if (this->iserverminute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_iserverminute(), target);
  }

  // float fServerSecond = 3;
  if (!(this->fserversecond() <= 0 && this->fserversecond() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fserversecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_TIME)
  return target;
}

size_t S_TIME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_TIME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iSendTick = 1;
  if (this->isendtick() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_isendtick());
  }

  // uint32 iServerMinute = 2;
  if (this->iserverminute() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iserverminute());
  }

  // float fServerSecond = 3;
  if (!(this->fserversecond() <= 0 && this->fserversecond() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_TIME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_TIME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_TIME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_TIME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_TIME)
    MergeFrom(*source);
  }
}

void S_TIME::MergeFrom(const S_TIME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_TIME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isendtick() != 0) {
    _internal_set_isendtick(from._internal_isendtick());
  }
  if (from.iserverminute() != 0) {
    _internal_set_iserverminute(from._internal_iserverminute());
  }
  if (!(from.fserversecond() <= 0 && from.fserversecond() >= 0)) {
    _internal_set_fserversecond(from._internal_fserversecond());
  }
}

void S_TIME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_TIME::CopyFrom(const S_TIME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_TIME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_TIME::IsInitialized() const {
  return true;
}

void S_TIME::InternalSwap(S_TIME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_TIME, fserversecond_)
      + sizeof(S_TIME::fserversecond_)
      - PROTOBUF_FIELD_OFFSET(S_TIME, isendtick_)>(
          reinterpret_cast<char*>(&isendtick_),
          reinterpret_cast<char*>(&other->isendtick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_TIME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strnickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strnickname().empty()) {
    strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strnickname(), 
      GetArenaForAllocation());
  }
  iclass_ = from.iclass_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

void S_LOGIN::SharedCtor() {
strnickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
iclass_ = 0;
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strnickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_LOGIN::ArenaDtor(void* object) {
  S_LOGIN* _this = reinterpret_cast< S_LOGIN* >(object);
  (void)_this;
}
void S_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strnickname_.ClearToEmpty();
  iclass_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes strNickName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strnickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iClass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strNickName = 1;
  if (!this->strnickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_strnickname(), target);
  }

  // int32 iClass = 2;
  if (this->iclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_iclass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strNickName = 1;
  if (!this->strnickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strnickname());
  }

  // int32 iClass = 2;
  if (this->iclass() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iclass());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_LOGIN)
    MergeFrom(*source);
  }
}

void S_LOGIN::MergeFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.strnickname().empty()) {
    _internal_set_strnickname(from._internal_strnickname());
  }
  if (from.iclass() != 0) {
    _internal_set_iclass(from._internal_iclass());
  }
}

void S_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strnickname_, GetArenaForAllocation(),
      &other->strnickname_, other->GetArenaForAllocation()
  );
  swap(iclass_, other->iclass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class S_OPEN_LEVEL::_Internal {
 public:
};

S_OPEN_LEVEL::S_OPEN_LEVEL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OPEN_LEVEL)
}
S_OPEN_LEVEL::S_OPEN_LEVEL(const S_OPEN_LEVEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ilevelid_ = from.ilevelid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OPEN_LEVEL)
}

void S_OPEN_LEVEL::SharedCtor() {
ilevelid_ = uint64_t{0u};
}

S_OPEN_LEVEL::~S_OPEN_LEVEL() {
  // @@protoc_insertion_point(destructor:Protocol.S_OPEN_LEVEL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_OPEN_LEVEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OPEN_LEVEL::ArenaDtor(void* object) {
  S_OPEN_LEVEL* _this = reinterpret_cast< S_OPEN_LEVEL* >(object);
  (void)_this;
}
void S_OPEN_LEVEL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_OPEN_LEVEL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_OPEN_LEVEL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OPEN_LEVEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ilevelid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OPEN_LEVEL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 iLevelID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ilevelid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_OPEN_LEVEL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OPEN_LEVEL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 iLevelID = 1;
  if (this->ilevelid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ilevelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OPEN_LEVEL)
  return target;
}

size_t S_OPEN_LEVEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OPEN_LEVEL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 iLevelID = 1;
  if (this->ilevelid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ilevelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_OPEN_LEVEL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_OPEN_LEVEL)
  GOOGLE_DCHECK_NE(&from, this);
  const S_OPEN_LEVEL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_OPEN_LEVEL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_OPEN_LEVEL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_OPEN_LEVEL)
    MergeFrom(*source);
  }
}

void S_OPEN_LEVEL::MergeFrom(const S_OPEN_LEVEL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OPEN_LEVEL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ilevelid() != 0) {
    _internal_set_ilevelid(from._internal_ilevelid());
  }
}

void S_OPEN_LEVEL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_OPEN_LEVEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_OPEN_LEVEL::CopyFrom(const S_OPEN_LEVEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OPEN_LEVEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OPEN_LEVEL::IsInitialized() const {
  return true;
}

void S_OPEN_LEVEL::InternalSwap(S_OPEN_LEVEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ilevelid_, other->ilevelid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OPEN_LEVEL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_LEVEL_STATE::_Internal {
 public:
};

S_LEVEL_STATE::S_LEVEL_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEVEL_STATE)
}
S_LEVEL_STATE::S_LEVEL_STATE(const S_LEVEL_STATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ilevelstate_ = from.ilevelstate_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEVEL_STATE)
}

void S_LEVEL_STATE::SharedCtor() {
ilevelstate_ = 0u;
}

S_LEVEL_STATE::~S_LEVEL_STATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_LEVEL_STATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_LEVEL_STATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LEVEL_STATE::ArenaDtor(void* object) {
  S_LEVEL_STATE* _this = reinterpret_cast< S_LEVEL_STATE* >(object);
  (void)_this;
}
void S_LEVEL_STATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_LEVEL_STATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_LEVEL_STATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LEVEL_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ilevelstate_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEVEL_STATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 iLevelState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ilevelstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_LEVEL_STATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LEVEL_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 iLevelState = 1;
  if (this->ilevelstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ilevelstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LEVEL_STATE)
  return target;
}

size_t S_LEVEL_STATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LEVEL_STATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 iLevelState = 1;
  if (this->ilevelstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilevelstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_LEVEL_STATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_LEVEL_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_LEVEL_STATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_LEVEL_STATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_LEVEL_STATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_LEVEL_STATE)
    MergeFrom(*source);
  }
}

void S_LEVEL_STATE::MergeFrom(const S_LEVEL_STATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LEVEL_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ilevelstate() != 0) {
    _internal_set_ilevelstate(from._internal_ilevelstate());
  }
}

void S_LEVEL_STATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_LEVEL_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_LEVEL_STATE::CopyFrom(const S_LEVEL_STATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LEVEL_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEVEL_STATE::IsInitialized() const {
  return true;
}

void S_LEVEL_STATE::InternalSwap(S_LEVEL_STATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ilevelstate_, other->ilevelstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEVEL_STATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_CREATE_OBJCECT::_Internal {
 public:
};

void S_CREATE_OBJCECT::clear_tmonsterinfo() {
  tmonsterinfo_.Clear();
}
S_CREATE_OBJCECT::S_CREATE_OBJCECT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vpos_(arena),
  tmonsterinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATE_OBJCECT)
}
S_CREATE_OBJCECT::S_CREATE_OBJCECT(const S_CREATE_OBJCECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vpos_(from.vpos_),
      tmonsterinfo_(from.tmonsterinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strname().empty()) {
    strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bcontroll_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(bcontroll_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATE_OBJCECT)
}

void S_CREATE_OBJCECT::SharedCtor() {
strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bcontroll_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(bcontroll_));
}

S_CREATE_OBJCECT::~S_CREATE_OBJCECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATE_OBJCECT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CREATE_OBJCECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CREATE_OBJCECT::ArenaDtor(void* object) {
  S_CREATE_OBJCECT* _this = reinterpret_cast< S_CREATE_OBJCECT* >(object);
  (void)_this;
}
void S_CREATE_OBJCECT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CREATE_OBJCECT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CREATE_OBJCECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATE_OBJCECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vpos_.Clear();
  tmonsterinfo_.Clear();
  strname_.ClearToEmpty();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bcontroll_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(bcontroll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATE_OBJCECT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iObjectType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iobjecttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 iLayer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CREATE_OBJCECT.strName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bControll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bcontroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float vPos = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_vpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.MonsterCreateInfo tMonsterInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tmonsterinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CREATE_OBJCECT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATE_OBJCECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // uint32 iObjectType = 2;
  if (this->iobjecttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_iobjecttype(), target);
  }

  // uint32 iLevel = 3;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ilevel(), target);
  }

  // uint32 iLayer = 4;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ilayer(), target);
  }

  // string strName = 5;
  if (!this->strname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strname().data(), static_cast<int>(this->_internal_strname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CREATE_OBJCECT.strName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strname(), target);
  }

  // bool bControll = 6;
  if (this->bcontroll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bcontroll(), target);
  }

  // repeated float vPos = 7 [packed = true];
  if (this->_internal_vpos_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_vpos(), target);
  }

  // repeated .Protocol.MonsterCreateInfo tMonsterInfo = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tmonsterinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_tmonsterinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATE_OBJCECT)
  return target;
}

size_t S_CREATE_OBJCECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATE_OBJCECT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vPos = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .Protocol.MonsterCreateInfo tMonsterInfo = 8;
  total_size += 1UL * this->_internal_tmonsterinfo_size();
  for (const auto& msg : this->tmonsterinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string strName = 5;
  if (!this->strname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strname());
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // uint32 iObjectType = 2;
  if (this->iobjecttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iobjecttype());
  }

  // uint32 iLevel = 3;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilevel());
  }

  // uint32 iLayer = 4;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ilayer());
  }

  // bool bControll = 6;
  if (this->bcontroll() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CREATE_OBJCECT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CREATE_OBJCECT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CREATE_OBJCECT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CREATE_OBJCECT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CREATE_OBJCECT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CREATE_OBJCECT)
    MergeFrom(*source);
  }
}

void S_CREATE_OBJCECT::MergeFrom(const S_CREATE_OBJCECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATE_OBJCECT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vpos_.MergeFrom(from.vpos_);
  tmonsterinfo_.MergeFrom(from.tmonsterinfo_);
  if (!from.strname().empty()) {
    _internal_set_strname(from._internal_strname());
  }
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.iobjecttype() != 0) {
    _internal_set_iobjecttype(from._internal_iobjecttype());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.bcontroll() != 0) {
    _internal_set_bcontroll(from._internal_bcontroll());
  }
}

void S_CREATE_OBJCECT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CREATE_OBJCECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CREATE_OBJCECT::CopyFrom(const S_CREATE_OBJCECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATE_OBJCECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATE_OBJCECT::IsInitialized() const {
  return true;
}

void S_CREATE_OBJCECT::InternalSwap(S_CREATE_OBJCECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vpos_.InternalSwap(&other->vpos_);
  tmonsterinfo_.InternalSwap(&other->tmonsterinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strname_, GetArenaForAllocation(),
      &other->strname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CREATE_OBJCECT, bcontroll_)
      + sizeof(S_CREATE_OBJCECT::bcontroll_)
      - PROTOBUF_FIELD_OFFSET(S_CREATE_OBJCECT, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_OBJCECT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_CHARACTER_NAME::_Internal {
 public:
};

S_CHARACTER_NAME::S_CHARACTER_NAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHARACTER_NAME)
}
S_CHARACTER_NAME::S_CHARACTER_NAME(const S_CHARACTER_NAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strname().empty()) {
    strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHARACTER_NAME)
}

void S_CHARACTER_NAME::SharedCtor() {
strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

S_CHARACTER_NAME::~S_CHARACTER_NAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHARACTER_NAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CHARACTER_NAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CHARACTER_NAME::ArenaDtor(void* object) {
  S_CHARACTER_NAME* _this = reinterpret_cast< S_CHARACTER_NAME* >(object);
  (void)_this;
}
void S_CHARACTER_NAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHARACTER_NAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHARACTER_NAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHARACTER_NAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHARACTER_NAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string strName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CHARACTER_NAME.strName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CHARACTER_NAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHARACTER_NAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strName = 1;
  if (!this->strname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strname().data(), static_cast<int>(this->_internal_strname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHARACTER_NAME.strName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHARACTER_NAME)
  return target;
}

size_t S_CHARACTER_NAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHARACTER_NAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strName = 1;
  if (!this->strname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CHARACTER_NAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CHARACTER_NAME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CHARACTER_NAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CHARACTER_NAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CHARACTER_NAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CHARACTER_NAME)
    MergeFrom(*source);
  }
}

void S_CHARACTER_NAME::MergeFrom(const S_CHARACTER_NAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHARACTER_NAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.strname().empty()) {
    _internal_set_strname(from._internal_strname());
  }
}

void S_CHARACTER_NAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CHARACTER_NAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CHARACTER_NAME::CopyFrom(const S_CHARACTER_NAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHARACTER_NAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHARACTER_NAME::IsInitialized() const {
  return true;
}

void S_CHARACTER_NAME::InternalSwap(S_CHARACTER_NAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strname_, GetArenaForAllocation(),
      &other->strname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHARACTER_NAME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_MATRIX::_Internal {
 public:
};

S_MATRIX::S_MATRIX(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MATRIX)
}
S_MATRIX::S_MATRIX(const S_MATRIX& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_(from.matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ilayer_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MATRIX)
}

void S_MATRIX::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ilayer_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
}

S_MATRIX::~S_MATRIX() {
  // @@protoc_insertion_point(destructor:Protocol.S_MATRIX)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_MATRIX::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_MATRIX::ArenaDtor(void* object) {
  S_MATRIX* _this = reinterpret_cast< S_MATRIX* >(object);
  (void)_this;
}
void S_MATRIX::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_MATRIX::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MATRIX::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MATRIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_.Clear();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ilayer_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MATRIX::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float Matrix = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_MATRIX::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MATRIX)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // repeated float Matrix = 4 [packed = true];
  if (this->_internal_matrix_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MATRIX)
  return target;
}

size_t S_MATRIX::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MATRIX)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float Matrix = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_MATRIX::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_MATRIX)
  GOOGLE_DCHECK_NE(&from, this);
  const S_MATRIX* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_MATRIX>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_MATRIX)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_MATRIX)
    MergeFrom(*source);
  }
}

void S_MATRIX::MergeFrom(const S_MATRIX& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MATRIX)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_.MergeFrom(from.matrix_);
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
}

void S_MATRIX::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_MATRIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_MATRIX::CopyFrom(const S_MATRIX& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MATRIX)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MATRIX::IsInitialized() const {
  return true;
}

void S_MATRIX::InternalSwap(S_MATRIX* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_.InternalSwap(&other->matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MATRIX, ilayer_)
      + sizeof(S_MATRIX::ilayer_)
      - PROTOBUF_FIELD_OFFSET(S_MATRIX, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MATRIX::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_ANIMATION::_Internal {
 public:
};

S_ANIMATION::S_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ANIMATION)
}
S_ANIMATION::S_ANIMATION(const S_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ichangeframe_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ichangeframe_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ANIMATION)
}

void S_ANIMATION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ichangeframe_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ichangeframe_));
}

S_ANIMATION::~S_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.S_ANIMATION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ANIMATION::ArenaDtor(void* object) {
  S_ANIMATION* _this = reinterpret_cast< S_ANIMATION* >(object);
  (void)_this;
}
void S_ANIMATION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_ANIMATION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ANIMATION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ichangeframe_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(ichangeframe_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ANIMATION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iAnimIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ianimindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fChangeTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fchangetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 iStartFrame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          istartframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iChangeFrame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ichangeframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_ANIMATION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ANIMATION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // int32 iAnimIndex = 4;
  if (this->ianimindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ianimindex(), target);
  }

  // float fChangeTime = 5;
  if (!(this->fchangetime() <= 0 && this->fchangetime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fchangetime(), target);
  }

  // int32 iStartFrame = 6;
  if (this->istartframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_istartframe(), target);
  }

  // int32 iChangeFrame = 7;
  if (this->ichangeframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ichangeframe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ANIMATION)
  return target;
}

size_t S_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ANIMATION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // int32 iAnimIndex = 4;
  if (this->ianimindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ianimindex());
  }

  // float fChangeTime = 5;
  if (!(this->fchangetime() <= 0 && this->fchangetime() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 iStartFrame = 6;
  if (this->istartframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_istartframe());
  }

  // int32 iChangeFrame = 7;
  if (this->ichangeframe() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ichangeframe());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_ANIMATION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_ANIMATION)
  GOOGLE_DCHECK_NE(&from, this);
  const S_ANIMATION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_ANIMATION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_ANIMATION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_ANIMATION)
    MergeFrom(*source);
  }
}

void S_ANIMATION::MergeFrom(const S_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ANIMATION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.ianimindex() != 0) {
    _internal_set_ianimindex(from._internal_ianimindex());
  }
  if (!(from.fchangetime() <= 0 && from.fchangetime() >= 0)) {
    _internal_set_fchangetime(from._internal_fchangetime());
  }
  if (from.istartframe() != 0) {
    _internal_set_istartframe(from._internal_istartframe());
  }
  if (from.ichangeframe() != 0) {
    _internal_set_ichangeframe(from._internal_ichangeframe());
  }
}

void S_ANIMATION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_ANIMATION::CopyFrom(const S_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ANIMATION::IsInitialized() const {
  return true;
}

void S_ANIMATION::InternalSwap(S_ANIMATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ANIMATION, ichangeframe_)
      + sizeof(S_ANIMATION::ichangeframe_)
      - PROTOBUF_FIELD_OFFSET(S_ANIMATION, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ANIMATION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_OBJECTINFO::_Internal {
 public:
};

void S_OBJECTINFO::clear_tobject() {
  tobject_.Clear();
}
S_OBJECTINFO::S_OBJECTINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tobject_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_OBJECTINFO)
}
S_OBJECTINFO::S_OBJECTINFO(const S_OBJECTINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tobject_(from.tobject_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_OBJECTINFO)
}

void S_OBJECTINFO::SharedCtor() {
}

S_OBJECTINFO::~S_OBJECTINFO() {
  // @@protoc_insertion_point(destructor:Protocol.S_OBJECTINFO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_OBJECTINFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_OBJECTINFO::ArenaDtor(void* object) {
  S_OBJECTINFO* _this = reinterpret_cast< S_OBJECTINFO* >(object);
  (void)_this;
}
void S_OBJECTINFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_OBJECTINFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_OBJECTINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_OBJECTINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tobject_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_OBJECTINFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectInfo tObject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tobject(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_OBJECTINFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_OBJECTINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo tObject = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tobject_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tobject(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_OBJECTINFO)
  return target;
}

size_t S_OBJECTINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_OBJECTINFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo tObject = 1;
  total_size += 1UL * this->_internal_tobject_size();
  for (const auto& msg : this->tobject_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_OBJECTINFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_OBJECTINFO)
  GOOGLE_DCHECK_NE(&from, this);
  const S_OBJECTINFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_OBJECTINFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_OBJECTINFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_OBJECTINFO)
    MergeFrom(*source);
  }
}

void S_OBJECTINFO::MergeFrom(const S_OBJECTINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_OBJECTINFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tobject_.MergeFrom(from.tobject_);
}

void S_OBJECTINFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_OBJECTINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_OBJECTINFO::CopyFrom(const S_OBJECTINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_OBJECTINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_OBJECTINFO::IsInitialized() const {
  return true;
}

void S_OBJECTINFO::InternalSwap(S_OBJECTINFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tobject_.InternalSwap(&other->tobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_OBJECTINFO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S_STATE::_Internal {
 public:
  static const ::Protocol::ObjectInfo& tobject(const S_STATE* msg);
};

const ::Protocol::ObjectInfo&
S_STATE::_Internal::tobject(const S_STATE* msg) {
  return *msg->tobject_;
}
void S_STATE::clear_tobject() {
  if (GetArenaForAllocation() == nullptr && tobject_ != nullptr) {
    delete tobject_;
  }
  tobject_ = nullptr;
}
S_STATE::S_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_STATE)
}
S_STATE::S_STATE(const S_STATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strstate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strstate().empty()) {
    strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strstate(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tobject()) {
    tobject_ = new ::Protocol::ObjectInfo(*from.tobject_);
  } else {
    tobject_ = nullptr;
  }
  ::memcpy(&itargetobjectlayer_, &from.itargetobjectlayer_,
    static_cast<size_t>(reinterpret_cast<char*>(&iweaponindex_) -
    reinterpret_cast<char*>(&itargetobjectlayer_)) + sizeof(iweaponindex_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_STATE)
}

void S_STATE::SharedCtor() {
strstate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tobject_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iweaponindex_) -
    reinterpret_cast<char*>(&tobject_)) + sizeof(iweaponindex_));
}

S_STATE::~S_STATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_STATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_STATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strstate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tobject_;
}

void S_STATE::ArenaDtor(void* object) {
  S_STATE* _this = reinterpret_cast< S_STATE* >(object);
  (void)_this;
}
void S_STATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_STATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_STATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strstate_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tobject_ != nullptr) {
    delete tobject_;
  }
  tobject_ = nullptr;
  ::memset(&itargetobjectlayer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iweaponindex_) -
      reinterpret_cast<char*>(&itargetobjectlayer_)) + sizeof(iweaponindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_STATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo tObject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strstate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_STATE.strState"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iTargetObjectLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          itargetobjectlayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iTargetObjectID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          itargetobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iHitObjectLayer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ihitobjectlayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iHitObjectID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ihitobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iWeaponIndex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          iweaponindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_STATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_STATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo tObject = 1;
  if (this->has_tobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tobject(this), target, stream);
  }

  // string strState = 2;
  if (!this->strstate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strstate().data(), static_cast<int>(this->_internal_strstate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_STATE.strState");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strstate(), target);
  }

  // int32 iTargetObjectLayer = 3;
  if (this->itargetobjectlayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_itargetobjectlayer(), target);
  }

  // int32 iTargetObjectID = 4;
  if (this->itargetobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_itargetobjectid(), target);
  }

  // int32 iHitObjectLayer = 5;
  if (this->ihitobjectlayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ihitobjectlayer(), target);
  }

  // int32 iHitObjectID = 6;
  if (this->ihitobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ihitobjectid(), target);
  }

  // int32 iWeaponIndex = 7;
  if (this->iweaponindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_iweaponindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_STATE)
  return target;
}

size_t S_STATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_STATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strState = 2;
  if (!this->strstate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strstate());
  }

  // .Protocol.ObjectInfo tObject = 1;
  if (this->has_tobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tobject_);
  }

  // int32 iTargetObjectLayer = 3;
  if (this->itargetobjectlayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itargetobjectlayer());
  }

  // int32 iTargetObjectID = 4;
  if (this->itargetobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itargetobjectid());
  }

  // int32 iHitObjectLayer = 5;
  if (this->ihitobjectlayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ihitobjectlayer());
  }

  // int32 iHitObjectID = 6;
  if (this->ihitobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ihitobjectid());
  }

  // int32 iWeaponIndex = 7;
  if (this->iweaponindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iweaponindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_STATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_STATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_STATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_STATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_STATE)
    MergeFrom(*source);
  }
}

void S_STATE::MergeFrom(const S_STATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_STATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.strstate().empty()) {
    _internal_set_strstate(from._internal_strstate());
  }
  if (from.has_tobject()) {
    _internal_mutable_tobject()->::Protocol::ObjectInfo::MergeFrom(from._internal_tobject());
  }
  if (from.itargetobjectlayer() != 0) {
    _internal_set_itargetobjectlayer(from._internal_itargetobjectlayer());
  }
  if (from.itargetobjectid() != 0) {
    _internal_set_itargetobjectid(from._internal_itargetobjectid());
  }
  if (from.ihitobjectlayer() != 0) {
    _internal_set_ihitobjectlayer(from._internal_ihitobjectlayer());
  }
  if (from.ihitobjectid() != 0) {
    _internal_set_ihitobjectid(from._internal_ihitobjectid());
  }
  if (from.iweaponindex() != 0) {
    _internal_set_iweaponindex(from._internal_iweaponindex());
  }
}

void S_STATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_STATE::CopyFrom(const S_STATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_STATE::IsInitialized() const {
  return true;
}

void S_STATE::InternalSwap(S_STATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strstate_, GetArenaForAllocation(),
      &other->strstate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_STATE, iweaponindex_)
      + sizeof(S_STATE::iweaponindex_)
      - PROTOBUF_FIELD_OFFSET(S_STATE, tobject_)>(
          reinterpret_cast<char*>(&tobject_),
          reinterpret_cast<char*>(&other->tobject_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_STATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_COLLIDERSTATE::_Internal {
 public:
};

void S_COLLIDERSTATE::clear_tchild() {
  tchild_.Clear();
}
S_COLLIDERSTATE::S_COLLIDERSTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  voffset_(arena),
  tchild_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_COLLIDERSTATE)
}
S_COLLIDERSTATE::S_COLLIDERSTATE(const S_COLLIDERSTATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      voffset_(from.voffset_),
      tchild_(from.tchild_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iattack_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(iattack_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_COLLIDERSTATE)
}

void S_COLLIDERSTATE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iattack_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(iattack_));
}

S_COLLIDERSTATE::~S_COLLIDERSTATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_COLLIDERSTATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_COLLIDERSTATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_COLLIDERSTATE::ArenaDtor(void* object) {
  S_COLLIDERSTATE* _this = reinterpret_cast< S_COLLIDERSTATE* >(object);
  (void)_this;
}
void S_COLLIDERSTATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_COLLIDERSTATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_COLLIDERSTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_COLLIDERSTATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voffset_.Clear();
  tchild_.Clear();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iattack_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(iattack_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_COLLIDERSTATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iColLayer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          icollayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fRadius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float vOffset = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_voffset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_voffset(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool bActive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iAttackType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          iattacktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iAttack = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          iattack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bSlow = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bslow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.ChildCollider tChild = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tchild(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_COLLIDERSTATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_COLLIDERSTATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // int32 iColLayer = 4;
  if (this->icollayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_icollayer(), target);
  }

  // float fRadius = 5;
  if (!(this->fradius() <= 0 && this->fradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fradius(), target);
  }

  // repeated float vOffset = 6 [packed = true];
  if (this->_internal_voffset_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_voffset(), target);
  }

  // bool bActive = 7;
  if (this->bactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_bactive(), target);
  }

  // int32 iAttackType = 8;
  if (this->iattacktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_iattacktype(), target);
  }

  // int32 iAttack = 9;
  if (this->iattack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_iattack(), target);
  }

  // bool bSlow = 10;
  if (this->bslow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_bslow(), target);
  }

  // repeated .Protocol.ChildCollider tChild = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tchild_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_tchild(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_COLLIDERSTATE)
  return target;
}

size_t S_COLLIDERSTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_COLLIDERSTATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vOffset = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_voffset_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .Protocol.ChildCollider tChild = 11;
  total_size += 1UL * this->_internal_tchild_size();
  for (const auto& msg : this->tchild_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // int32 iColLayer = 4;
  if (this->icollayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icollayer());
  }

  // float fRadius = 5;
  if (!(this->fradius() <= 0 && this->fradius() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 iAttackType = 8;
  if (this->iattacktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iattacktype());
  }

  // bool bActive = 7;
  if (this->bactive() != 0) {
    total_size += 1 + 1;
  }

  // bool bSlow = 10;
  if (this->bslow() != 0) {
    total_size += 1 + 1;
  }

  // int32 iAttack = 9;
  if (this->iattack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iattack());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_COLLIDERSTATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_COLLIDERSTATE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_COLLIDERSTATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_COLLIDERSTATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_COLLIDERSTATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_COLLIDERSTATE)
    MergeFrom(*source);
  }
}

void S_COLLIDERSTATE::MergeFrom(const S_COLLIDERSTATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_COLLIDERSTATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  voffset_.MergeFrom(from.voffset_);
  tchild_.MergeFrom(from.tchild_);
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.icollayer() != 0) {
    _internal_set_icollayer(from._internal_icollayer());
  }
  if (!(from.fradius() <= 0 && from.fradius() >= 0)) {
    _internal_set_fradius(from._internal_fradius());
  }
  if (from.iattacktype() != 0) {
    _internal_set_iattacktype(from._internal_iattacktype());
  }
  if (from.bactive() != 0) {
    _internal_set_bactive(from._internal_bactive());
  }
  if (from.bslow() != 0) {
    _internal_set_bslow(from._internal_bslow());
  }
  if (from.iattack() != 0) {
    _internal_set_iattack(from._internal_iattack());
  }
}

void S_COLLIDERSTATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_COLLIDERSTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_COLLIDERSTATE::CopyFrom(const S_COLLIDERSTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_COLLIDERSTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_COLLIDERSTATE::IsInitialized() const {
  return true;
}

void S_COLLIDERSTATE::InternalSwap(S_COLLIDERSTATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  voffset_.InternalSwap(&other->voffset_);
  tchild_.InternalSwap(&other->tchild_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_COLLIDERSTATE, iattack_)
      + sizeof(S_COLLIDERSTATE::iattack_)
      - PROTOBUF_FIELD_OFFSET(S_COLLIDERSTATE, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_COLLIDERSTATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_COLLISION::_Internal {
 public:
};

S_COLLISION::S_COLLISION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vhitpos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_COLLISION)
}
S_COLLISION::S_COLLISION(const S_COLLISION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vhitpos_(from.vhitpos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fduration_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(fduration_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_COLLISION)
}

void S_COLLISION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fduration_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(fduration_));
}

S_COLLISION::~S_COLLISION() {
  // @@protoc_insertion_point(destructor:Protocol.S_COLLISION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_COLLISION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_COLLISION::ArenaDtor(void* object) {
  S_COLLISION* _this = reinterpret_cast< S_COLLISION* >(object);
  (void)_this;
}
void S_COLLISION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_COLLISION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_COLLISION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_COLLISION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vhitpos_.Clear();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fduration_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(fduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_COLLISION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 iDamage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          idamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float vHitPos = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vhitpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_vhitpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 iStatusEffect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          istatuseffect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fForce = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          fforce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fDuration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          fduration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_COLLISION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_COLLISION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // int64 iDamage = 4;
  if (this->idamage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_idamage(), target);
  }

  // repeated float vHitPos = 5 [packed = true];
  if (this->_internal_vhitpos_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_vhitpos(), target);
  }

  // int32 iStatusEffect = 6;
  if (this->istatuseffect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_istatuseffect(), target);
  }

  // float fForce = 7;
  if (!(this->fforce() <= 0 && this->fforce() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_fforce(), target);
  }

  // float fDuration = 8;
  if (!(this->fduration() <= 0 && this->fduration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_fduration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_COLLISION)
  return target;
}

size_t S_COLLISION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_COLLISION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vHitPos = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vhitpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int64 iDamage = 4;
  if (this->idamage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_idamage());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // int32 iStatusEffect = 6;
  if (this->istatuseffect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_istatuseffect());
  }

  // float fForce = 7;
  if (!(this->fforce() <= 0 && this->fforce() >= 0)) {
    total_size += 1 + 4;
  }

  // float fDuration = 8;
  if (!(this->fduration() <= 0 && this->fduration() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_COLLISION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_COLLISION)
  GOOGLE_DCHECK_NE(&from, this);
  const S_COLLISION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_COLLISION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_COLLISION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_COLLISION)
    MergeFrom(*source);
  }
}

void S_COLLISION::MergeFrom(const S_COLLISION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_COLLISION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vhitpos_.MergeFrom(from.vhitpos_);
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.idamage() != 0) {
    _internal_set_idamage(from._internal_idamage());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.istatuseffect() != 0) {
    _internal_set_istatuseffect(from._internal_istatuseffect());
  }
  if (!(from.fforce() <= 0 && from.fforce() >= 0)) {
    _internal_set_fforce(from._internal_fforce());
  }
  if (!(from.fduration() <= 0 && from.fduration() >= 0)) {
    _internal_set_fduration(from._internal_fduration());
  }
}

void S_COLLISION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_COLLISION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_COLLISION::CopyFrom(const S_COLLISION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_COLLISION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_COLLISION::IsInitialized() const {
  return true;
}

void S_COLLISION::InternalSwap(S_COLLISION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vhitpos_.InternalSwap(&other->vhitpos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_COLLISION, fduration_)
      + sizeof(S_COLLISION::fduration_)
      - PROTOBUF_FIELD_OFFSET(S_COLLISION, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_COLLISION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_NICKNAME::_Internal {
 public:
};

S_NICKNAME::S_NICKNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_NICKNAME)
}
S_NICKNAME::S_NICKNAME(const S_NICKNAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strnickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strnickname().empty()) {
    strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strnickname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_NICKNAME)
}

void S_NICKNAME::SharedCtor() {
strnickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

S_NICKNAME::~S_NICKNAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_NICKNAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_NICKNAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strnickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_NICKNAME::ArenaDtor(void* object) {
  S_NICKNAME* _this = reinterpret_cast< S_NICKNAME* >(object);
  (void)_this;
}
void S_NICKNAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_NICKNAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_NICKNAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_NICKNAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strnickname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_NICKNAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes strNickName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strnickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_NICKNAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_NICKNAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strNickName = 1;
  if (!this->strnickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_strnickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_NICKNAME)
  return target;
}

size_t S_NICKNAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_NICKNAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes strNickName = 1;
  if (!this->strnickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strnickname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_NICKNAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_NICKNAME)
  GOOGLE_DCHECK_NE(&from, this);
  const S_NICKNAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_NICKNAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_NICKNAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_NICKNAME)
    MergeFrom(*source);
  }
}

void S_NICKNAME::MergeFrom(const S_NICKNAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_NICKNAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.strnickname().empty()) {
    _internal_set_strnickname(from._internal_strnickname());
  }
}

void S_NICKNAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_NICKNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_NICKNAME::CopyFrom(const S_NICKNAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_NICKNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_NICKNAME::IsInitialized() const {
  return true;
}

void S_NICKNAME::InternalSwap(S_NICKNAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strnickname_, GetArenaForAllocation(),
      &other->strnickname_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_NICKNAME::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class S_USERINFO::_Internal {
 public:
};

void S_USERINFO::clear_tuser() {
  tuser_.Clear();
}
S_USERINFO::S_USERINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tuser_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_USERINFO)
}
S_USERINFO::S_USERINFO(const S_USERINFO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tuser_(from.tuser_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_USERINFO)
}

void S_USERINFO::SharedCtor() {
}

S_USERINFO::~S_USERINFO() {
  // @@protoc_insertion_point(destructor:Protocol.S_USERINFO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_USERINFO::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_USERINFO::ArenaDtor(void* object) {
  S_USERINFO* _this = reinterpret_cast< S_USERINFO* >(object);
  (void)_this;
}
void S_USERINFO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_USERINFO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_USERINFO::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_USERINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tuser_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_USERINFO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.UserInfo tUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tuser(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_USERINFO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_USERINFO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.UserInfo tUser = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tuser_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tuser(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_USERINFO)
  return target;
}

size_t S_USERINFO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_USERINFO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.UserInfo tUser = 1;
  total_size += 1UL * this->_internal_tuser_size();
  for (const auto& msg : this->tuser_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_USERINFO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_USERINFO)
  GOOGLE_DCHECK_NE(&from, this);
  const S_USERINFO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_USERINFO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_USERINFO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_USERINFO)
    MergeFrom(*source);
  }
}

void S_USERINFO::MergeFrom(const S_USERINFO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_USERINFO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tuser_.MergeFrom(from.tuser_);
}

void S_USERINFO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_USERINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_USERINFO::CopyFrom(const S_USERINFO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_USERINFO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_USERINFO::IsInitialized() const {
  return true;
}

void S_USERINFO::InternalSwap(S_USERINFO* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tuser_.InternalSwap(&other->tuser_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_USERINFO::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_NEARTARGET::_Internal {
 public:
};

S_NEARTARGET::S_NEARTARGET(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_NEARTARGET)
}
S_NEARTARGET::S_NEARTARGET(const S_NEARTARGET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itargetobjectid_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(itargetobjectid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_NEARTARGET)
}

void S_NEARTARGET::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itargetobjectid_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(itargetobjectid_));
}

S_NEARTARGET::~S_NEARTARGET() {
  // @@protoc_insertion_point(destructor:Protocol.S_NEARTARGET)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_NEARTARGET::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_NEARTARGET::ArenaDtor(void* object) {
  S_NEARTARGET* _this = reinterpret_cast< S_NEARTARGET* >(object);
  (void)_this;
}
void S_NEARTARGET::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_NEARTARGET::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_NEARTARGET::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_NEARTARGET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itargetobjectid_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(itargetobjectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_NEARTARGET::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iTargetObjectLayer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          itargetobjectlayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iTargetObjectID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          itargetobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_NEARTARGET::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_NEARTARGET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // int32 iTargetObjectLayer = 4;
  if (this->itargetobjectlayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_itargetobjectlayer(), target);
  }

  // int32 iTargetObjectID = 5;
  if (this->itargetobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_itargetobjectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_NEARTARGET)
  return target;
}

size_t S_NEARTARGET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_NEARTARGET)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // int32 iTargetObjectLayer = 4;
  if (this->itargetobjectlayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itargetobjectlayer());
  }

  // int32 iTargetObjectID = 5;
  if (this->itargetobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itargetobjectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_NEARTARGET::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_NEARTARGET)
  GOOGLE_DCHECK_NE(&from, this);
  const S_NEARTARGET* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_NEARTARGET>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_NEARTARGET)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_NEARTARGET)
    MergeFrom(*source);
  }
}

void S_NEARTARGET::MergeFrom(const S_NEARTARGET& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_NEARTARGET)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.itargetobjectlayer() != 0) {
    _internal_set_itargetobjectlayer(from._internal_itargetobjectlayer());
  }
  if (from.itargetobjectid() != 0) {
    _internal_set_itargetobjectid(from._internal_itargetobjectid());
  }
}

void S_NEARTARGET::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_NEARTARGET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_NEARTARGET::CopyFrom(const S_NEARTARGET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_NEARTARGET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_NEARTARGET::IsInitialized() const {
  return true;
}

void S_NEARTARGET::InternalSwap(S_NEARTARGET* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_NEARTARGET, itargetobjectid_)
      + sizeof(S_NEARTARGET::itargetobjectid_)
      - PROTOBUF_FIELD_OFFSET(S_NEARTARGET, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_NEARTARGET::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class S_SETSKILL::_Internal {
 public:
};

S_SETSKILL::S_SETSKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SETSKILL)
}
S_SETSKILL::S_SETSKILL(const S_SETSKILL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  szskillname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_szskillname().empty()) {
    szskillname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szskillname(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iskillobjectid_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(iskillobjectid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SETSKILL)
}

void S_SETSKILL::SharedCtor() {
szskillname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iskillobjectid_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(iskillobjectid_));
}

S_SETSKILL::~S_SETSKILL() {
  // @@protoc_insertion_point(destructor:Protocol.S_SETSKILL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SETSKILL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  szskillname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_SETSKILL::ArenaDtor(void* object) {
  S_SETSKILL* _this = reinterpret_cast< S_SETSKILL* >(object);
  (void)_this;
}
void S_SETSKILL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SETSKILL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SETSKILL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SETSKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szskillname_.ClearToEmpty();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iskillobjectid_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(iskillobjectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SETSKILL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string szSkillName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_szskillname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_SETSKILL.szSkillName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iSkillObjectID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          iskillobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SETSKILL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SETSKILL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // string szSkillName = 4;
  if (!this->szskillname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_szskillname().data(), static_cast<int>(this->_internal_szskillname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_SETSKILL.szSkillName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_szskillname(), target);
  }

  // int32 iSkillObjectID = 5;
  if (this->iskillobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iskillobjectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SETSKILL)
  return target;
}

size_t S_SETSKILL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SETSKILL)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szSkillName = 4;
  if (!this->szskillname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_szskillname());
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // int32 iSkillObjectID = 5;
  if (this->iskillobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iskillobjectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SETSKILL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SETSKILL)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SETSKILL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SETSKILL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SETSKILL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SETSKILL)
    MergeFrom(*source);
  }
}

void S_SETSKILL::MergeFrom(const S_SETSKILL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SETSKILL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.szskillname().empty()) {
    _internal_set_szskillname(from._internal_szskillname());
  }
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.iskillobjectid() != 0) {
    _internal_set_iskillobjectid(from._internal_iskillobjectid());
  }
}

void S_SETSKILL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SETSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SETSKILL::CopyFrom(const S_SETSKILL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SETSKILL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SETSKILL::IsInitialized() const {
  return true;
}

void S_SETSKILL::InternalSwap(S_SETSKILL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szskillname_, GetArenaForAllocation(),
      &other->szskillname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SETSKILL, iskillobjectid_)
      + sizeof(S_SETSKILL::iskillobjectid_)
      - PROTOBUF_FIELD_OFFSET(S_SETSKILL, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SETSKILL::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class S_SLOWMOTION::_Internal {
 public:
};

S_SLOWMOTION::S_SLOWMOTION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SLOWMOTION)
}
S_SLOWMOTION::S_SLOWMOTION(const S_SLOWMOTION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&bslow_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(bslow_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SLOWMOTION)
}

void S_SLOWMOTION::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bslow_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(bslow_));
}

S_SLOWMOTION::~S_SLOWMOTION() {
  // @@protoc_insertion_point(destructor:Protocol.S_SLOWMOTION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SLOWMOTION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SLOWMOTION::ArenaDtor(void* object) {
  S_SLOWMOTION* _this = reinterpret_cast< S_SLOWMOTION* >(object);
  (void)_this;
}
void S_SLOWMOTION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SLOWMOTION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SLOWMOTION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SLOWMOTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bslow_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(bslow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SLOWMOTION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bSlow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bslow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SLOWMOTION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SLOWMOTION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // bool bSlow = 4;
  if (this->bslow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bslow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SLOWMOTION)
  return target;
}

size_t S_SLOWMOTION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SLOWMOTION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // bool bSlow = 4;
  if (this->bslow() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SLOWMOTION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SLOWMOTION)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SLOWMOTION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SLOWMOTION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SLOWMOTION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SLOWMOTION)
    MergeFrom(*source);
  }
}

void S_SLOWMOTION::MergeFrom(const S_SLOWMOTION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SLOWMOTION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.bslow() != 0) {
    _internal_set_bslow(from._internal_bslow());
  }
}

void S_SLOWMOTION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SLOWMOTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SLOWMOTION::CopyFrom(const S_SLOWMOTION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SLOWMOTION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SLOWMOTION::IsInitialized() const {
  return true;
}

void S_SLOWMOTION::InternalSwap(S_SLOWMOTION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SLOWMOTION, bslow_)
      + sizeof(S_SLOWMOTION::bslow_)
      - PROTOBUF_FIELD_OFFSET(S_SLOWMOTION, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SLOWMOTION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_CAMSHAKE::_Internal {
 public:
};

S_CAMSHAKE::S_CAMSHAKE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CAMSHAKE)
}
S_CAMSHAKE::S_CAMSHAKE(const S_CAMSHAKE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fcamshake_, &from.fcamshake_,
    static_cast<size_t>(reinterpret_cast<char*>(&fshaketime_) -
    reinterpret_cast<char*>(&fcamshake_)) + sizeof(fshaketime_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CAMSHAKE)
}

void S_CAMSHAKE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fcamshake_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fshaketime_) -
    reinterpret_cast<char*>(&fcamshake_)) + sizeof(fshaketime_));
}

S_CAMSHAKE::~S_CAMSHAKE() {
  // @@protoc_insertion_point(destructor:Protocol.S_CAMSHAKE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CAMSHAKE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CAMSHAKE::ArenaDtor(void* object) {
  S_CAMSHAKE* _this = reinterpret_cast< S_CAMSHAKE* >(object);
  (void)_this;
}
void S_CAMSHAKE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CAMSHAKE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CAMSHAKE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CAMSHAKE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fcamshake_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fshaketime_) -
      reinterpret_cast<char*>(&fcamshake_)) + sizeof(fshaketime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CAMSHAKE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float fCamShake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fcamshake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fShakeTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fshaketime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CAMSHAKE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CAMSHAKE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fCamShake = 1;
  if (!(this->fcamshake() <= 0 && this->fcamshake() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fcamshake(), target);
  }

  // float fShakeTime = 2;
  if (!(this->fshaketime() <= 0 && this->fshaketime() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fshaketime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CAMSHAKE)
  return target;
}

size_t S_CAMSHAKE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CAMSHAKE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fCamShake = 1;
  if (!(this->fcamshake() <= 0 && this->fcamshake() >= 0)) {
    total_size += 1 + 4;
  }

  // float fShakeTime = 2;
  if (!(this->fshaketime() <= 0 && this->fshaketime() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CAMSHAKE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CAMSHAKE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CAMSHAKE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CAMSHAKE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CAMSHAKE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CAMSHAKE)
    MergeFrom(*source);
  }
}

void S_CAMSHAKE::MergeFrom(const S_CAMSHAKE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CAMSHAKE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.fcamshake() <= 0 && from.fcamshake() >= 0)) {
    _internal_set_fcamshake(from._internal_fcamshake());
  }
  if (!(from.fshaketime() <= 0 && from.fshaketime() >= 0)) {
    _internal_set_fshaketime(from._internal_fshaketime());
  }
}

void S_CAMSHAKE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CAMSHAKE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CAMSHAKE::CopyFrom(const S_CAMSHAKE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CAMSHAKE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CAMSHAKE::IsInitialized() const {
  return true;
}

void S_CAMSHAKE::InternalSwap(S_CAMSHAKE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CAMSHAKE, fshaketime_)
      + sizeof(S_CAMSHAKE::fshaketime_)
      - PROTOBUF_FIELD_OFFSET(S_CAMSHAKE, fcamshake_)>(
          reinterpret_cast<char*>(&fcamshake_),
          reinterpret_cast<char*>(&other->fcamshake_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CAMSHAKE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class S_EVENT::_Internal {
 public:
};

S_EVENT::S_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EVENT)
}
S_EVENT::S_EVENT(const S_EVENT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ieventid_, &from.ieventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&istate_) -
    reinterpret_cast<char*>(&ieventid_)) + sizeof(istate_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EVENT)
}

void S_EVENT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ieventid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&istate_) -
    reinterpret_cast<char*>(&ieventid_)) + sizeof(istate_));
}

S_EVENT::~S_EVENT() {
  // @@protoc_insertion_point(destructor:Protocol.S_EVENT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_EVENT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EVENT::ArenaDtor(void* object) {
  S_EVENT* _this = reinterpret_cast< S_EVENT* >(object);
  (void)_this;
}
void S_EVENT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_EVENT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_EVENT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EVENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ieventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&istate_) -
      reinterpret_cast<char*>(&ieventid_)) + sizeof(istate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EVENT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iEventID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ieventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          istate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_EVENT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EVENT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iEventID = 1;
  if (this->ieventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ieventid(), target);
  }

  // int32 iState = 2;
  if (this->istate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_istate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EVENT)
  return target;
}

size_t S_EVENT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EVENT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iEventID = 1;
  if (this->ieventid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ieventid());
  }

  // int32 iState = 2;
  if (this->istate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_istate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_EVENT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_EVENT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_EVENT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_EVENT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_EVENT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_EVENT)
    MergeFrom(*source);
  }
}

void S_EVENT::MergeFrom(const S_EVENT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EVENT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ieventid() != 0) {
    _internal_set_ieventid(from._internal_ieventid());
  }
  if (from.istate() != 0) {
    _internal_set_istate(from._internal_istate());
  }
}

void S_EVENT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_EVENT::CopyFrom(const S_EVENT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EVENT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EVENT::IsInitialized() const {
  return true;
}

void S_EVENT::InternalSwap(S_EVENT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EVENT, istate_)
      + sizeof(S_EVENT::istate_)
      - PROTOBUF_FIELD_OFFSET(S_EVENT, ieventid_)>(
          reinterpret_cast<char*>(&ieventid_),
          reinterpret_cast<char*>(&other->ieventid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EVENT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class S_SKILLEXPLOSION::_Internal {
 public:
  static const ::Protocol::ObjectInfo& tobject(const S_SKILLEXPLOSION* msg);
};

const ::Protocol::ObjectInfo&
S_SKILLEXPLOSION::_Internal::tobject(const S_SKILLEXPLOSION* msg) {
  return *msg->tobject_;
}
void S_SKILLEXPLOSION::clear_tobject() {
  if (GetArenaForAllocation() == nullptr && tobject_ != nullptr) {
    delete tobject_;
  }
  tobject_ = nullptr;
}
S_SKILLEXPLOSION::S_SKILLEXPLOSION(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SKILLEXPLOSION)
}
S_SKILLEXPLOSION::S_SKILLEXPLOSION(const S_SKILLEXPLOSION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tobject()) {
    tobject_ = new ::Protocol::ObjectInfo(*from.tobject_);
  } else {
    tobject_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SKILLEXPLOSION)
}

void S_SKILLEXPLOSION::SharedCtor() {
tobject_ = nullptr;
}

S_SKILLEXPLOSION::~S_SKILLEXPLOSION() {
  // @@protoc_insertion_point(destructor:Protocol.S_SKILLEXPLOSION)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_SKILLEXPLOSION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tobject_;
}

void S_SKILLEXPLOSION::ArenaDtor(void* object) {
  S_SKILLEXPLOSION* _this = reinterpret_cast< S_SKILLEXPLOSION* >(object);
  (void)_this;
}
void S_SKILLEXPLOSION::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_SKILLEXPLOSION::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_SKILLEXPLOSION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SKILLEXPLOSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tobject_ != nullptr) {
    delete tobject_;
  }
  tobject_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SKILLEXPLOSION::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo tObject = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tobject(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_SKILLEXPLOSION::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SKILLEXPLOSION)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo tObject = 1;
  if (this->has_tobject()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tobject(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SKILLEXPLOSION)
  return target;
}

size_t S_SKILLEXPLOSION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SKILLEXPLOSION)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo tObject = 1;
  if (this->has_tobject()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tobject_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_SKILLEXPLOSION::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_SKILLEXPLOSION)
  GOOGLE_DCHECK_NE(&from, this);
  const S_SKILLEXPLOSION* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_SKILLEXPLOSION>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_SKILLEXPLOSION)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_SKILLEXPLOSION)
    MergeFrom(*source);
  }
}

void S_SKILLEXPLOSION::MergeFrom(const S_SKILLEXPLOSION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SKILLEXPLOSION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tobject()) {
    _internal_mutable_tobject()->::Protocol::ObjectInfo::MergeFrom(from._internal_tobject());
  }
}

void S_SKILLEXPLOSION::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_SKILLEXPLOSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_SKILLEXPLOSION::CopyFrom(const S_SKILLEXPLOSION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SKILLEXPLOSION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SKILLEXPLOSION::IsInitialized() const {
  return true;
}

void S_SKILLEXPLOSION::InternalSwap(S_SKILLEXPLOSION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tobject_, other->tobject_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SKILLEXPLOSION::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class S_HP::_Internal {
 public:
};

S_HP::S_HP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_HP)
}
S_HP::S_HP(const S_HP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ihp_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ihp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_HP)
}

void S_HP::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ihp_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ihp_));
}

S_HP::~S_HP() {
  // @@protoc_insertion_point(destructor:Protocol.S_HP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_HP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_HP::ArenaDtor(void* object) {
  S_HP* _this = reinterpret_cast< S_HP* >(object);
  (void)_this;
}
void S_HP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_HP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_HP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_HP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ihp_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(ihp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_HP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iHP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ihp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_HP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_HP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  // int32 iHP = 4;
  if (this->ihp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_ihp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_HP)
  return target;
}

size_t S_HP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_HP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  // int32 iHP = 4;
  if (this->ihp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ihp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_HP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_HP)
  GOOGLE_DCHECK_NE(&from, this);
  const S_HP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_HP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_HP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_HP)
    MergeFrom(*source);
  }
}

void S_HP::MergeFrom(const S_HP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_HP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
  if (from.ihp() != 0) {
    _internal_set_ihp(from._internal_ihp());
  }
}

void S_HP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_HP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_HP::CopyFrom(const S_HP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_HP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_HP::IsInitialized() const {
  return true;
}

void S_HP::InternalSwap(S_HP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_HP, ihp_)
      + sizeof(S_HP::ihp_)
      - PROTOBUF_FIELD_OFFSET(S_HP, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_HP::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class S_CREATE_PLAYER::_Internal {
 public:
};

S_CREATE_PLAYER::S_CREATE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matworld_(arena),
  vtargetpos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATE_PLAYER)
}
S_CREATE_PLAYER::S_CREATE_PLAYER(const S_CREATE_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matworld_(from.matworld_),
      vtargetpos_(from.vtargetpos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strnickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strnickname().empty()) {
    strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strnickname(), 
      GetArenaForAllocation());
  }
  strstate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strstate().empty()) {
    strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strstate(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iweaponindex_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(iweaponindex_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATE_PLAYER)
}

void S_CREATE_PLAYER::SharedCtor() {
strnickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
strstate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iweaponindex_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(iweaponindex_));
}

S_CREATE_PLAYER::~S_CREATE_PLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATE_PLAYER)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CREATE_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strnickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strstate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CREATE_PLAYER::ArenaDtor(void* object) {
  S_CREATE_PLAYER* _this = reinterpret_cast< S_CREATE_PLAYER* >(object);
  (void)_this;
}
void S_CREATE_PLAYER::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CREATE_PLAYER::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CREATE_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATE_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matworld_.Clear();
  vtargetpos_.Clear();
  strnickname_.ClearToEmpty();
  strstate_.ClearToEmpty();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iweaponindex_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(iweaponindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATE_PLAYER::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iClass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          iclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bControll = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bcontroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float matWorld = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_matworld(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_matworld(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes strNickName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_strnickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float vTargetPos = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vtargetpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_vtargetpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string strState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_strstate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_CREATE_PLAYER.strState"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iWeaponIndex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          iweaponindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CREATE_PLAYER::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATE_PLAYER)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iClass = 3;
  if (this->iclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_iclass(), target);
  }

  // bool bControll = 4;
  if (this->bcontroll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bcontroll(), target);
  }

  // repeated float matWorld = 5 [packed = true];
  if (this->_internal_matworld_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_matworld(), target);
  }

  // bytes strNickName = 6;
  if (!this->strnickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_strnickname(), target);
  }

  // repeated float vTargetPos = 7 [packed = true];
  if (this->_internal_vtargetpos_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_vtargetpos(), target);
  }

  // string strState = 8;
  if (!this->strstate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strstate().data(), static_cast<int>(this->_internal_strstate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CREATE_PLAYER.strState");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_strstate(), target);
  }

  // int32 iWeaponIndex = 9;
  if (this->iweaponindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_iweaponindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATE_PLAYER)
  return target;
}

size_t S_CREATE_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATE_PLAYER)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float matWorld = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matworld_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float vTargetPos = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vtargetpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // bytes strNickName = 6;
  if (!this->strnickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_strnickname());
  }

  // string strState = 8;
  if (!this->strstate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strstate());
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iClass = 3;
  if (this->iclass() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iclass());
  }

  // bool bControll = 4;
  if (this->bcontroll() != 0) {
    total_size += 1 + 1;
  }

  // int32 iWeaponIndex = 9;
  if (this->iweaponindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iweaponindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CREATE_PLAYER::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CREATE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CREATE_PLAYER* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CREATE_PLAYER>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CREATE_PLAYER)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CREATE_PLAYER)
    MergeFrom(*source);
  }
}

void S_CREATE_PLAYER::MergeFrom(const S_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATE_PLAYER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matworld_.MergeFrom(from.matworld_);
  vtargetpos_.MergeFrom(from.vtargetpos_);
  if (!from.strnickname().empty()) {
    _internal_set_strnickname(from._internal_strnickname());
  }
  if (!from.strstate().empty()) {
    _internal_set_strstate(from._internal_strstate());
  }
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.iclass() != 0) {
    _internal_set_iclass(from._internal_iclass());
  }
  if (from.bcontroll() != 0) {
    _internal_set_bcontroll(from._internal_bcontroll());
  }
  if (from.iweaponindex() != 0) {
    _internal_set_iweaponindex(from._internal_iweaponindex());
  }
}

void S_CREATE_PLAYER::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CREATE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CREATE_PLAYER::CopyFrom(const S_CREATE_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATE_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATE_PLAYER::IsInitialized() const {
  return true;
}

void S_CREATE_PLAYER::InternalSwap(S_CREATE_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matworld_.InternalSwap(&other->matworld_);
  vtargetpos_.InternalSwap(&other->vtargetpos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strnickname_, GetArenaForAllocation(),
      &other->strnickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strstate_, GetArenaForAllocation(),
      &other->strstate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CREATE_PLAYER, iweaponindex_)
      + sizeof(S_CREATE_PLAYER::iweaponindex_)
      - PROTOBUF_FIELD_OFFSET(S_CREATE_PLAYER, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_PLAYER::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  szchat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_szchat().empty()) {
    szchat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_szchat(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

void S_CHAT::SharedCtor() {
szchat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  szchat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_CHAT::ArenaDtor(void* object) {
  S_CHAT* _this = reinterpret_cast< S_CHAT* >(object);
  (void)_this;
}
void S_CHAT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_CHAT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szchat_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes szChat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_szchat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_CHAT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szChat = 1;
  if (!this->szchat().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_szchat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes szChat = 1;
  if (!this->szchat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_szchat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_CHAT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_CHAT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_CHAT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_CHAT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_CHAT)
    MergeFrom(*source);
  }
}

void S_CHAT::MergeFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.szchat().empty()) {
    _internal_set_szchat(from._internal_szchat());
  }
}

void S_CHAT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &szchat_, GetArenaForAllocation(),
      &other->szchat_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_MONSTERSTATE::_Internal {
 public:
};

S_MONSTERSTATE::S_MONSTERSTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vtargetpos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MONSTERSTATE)
}
S_MONSTERSTATE::S_MONSTERSTATE(const S_MONSTERSTATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vtargetpos_(from.vtargetpos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strstate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strstate().empty()) {
    strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strstate(), 
      GetArenaForAllocation());
  }
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itargetobjectid_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(itargetobjectid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MONSTERSTATE)
}

void S_MONSTERSTATE::SharedCtor() {
strstate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itargetobjectid_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(itargetobjectid_));
}

S_MONSTERSTATE::~S_MONSTERSTATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MONSTERSTATE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_MONSTERSTATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strstate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S_MONSTERSTATE::ArenaDtor(void* object) {
  S_MONSTERSTATE* _this = reinterpret_cast< S_MONSTERSTATE* >(object);
  (void)_this;
}
void S_MONSTERSTATE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_MONSTERSTATE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_MONSTERSTATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MONSTERSTATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vtargetpos_.Clear();
  strstate_.ClearToEmpty();
  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itargetobjectid_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(itargetobjectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MONSTERSTATE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strstate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.S_MONSTERSTATE.strState"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iTargetObjectLayer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          itargetobjectlayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iTargetObjectID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          itargetobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float vTargetPos = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vtargetpos(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_vtargetpos(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_MONSTERSTATE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MONSTERSTATE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // string strState = 3;
  if (!this->strstate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strstate().data(), static_cast<int>(this->_internal_strstate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_MONSTERSTATE.strState");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strstate(), target);
  }

  // int32 iTargetObjectLayer = 4;
  if (this->itargetobjectlayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_itargetobjectlayer(), target);
  }

  // int32 iTargetObjectID = 5;
  if (this->itargetobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_itargetobjectid(), target);
  }

  // repeated float vTargetPos = 6 [packed = true];
  if (this->_internal_vtargetpos_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_vtargetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MONSTERSTATE)
  return target;
}

size_t S_MONSTERSTATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MONSTERSTATE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vTargetPos = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vtargetpos_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string strState = 3;
  if (!this->strstate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strstate());
  }

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iTargetObjectLayer = 4;
  if (this->itargetobjectlayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itargetobjectlayer());
  }

  // int32 iTargetObjectID = 5;
  if (this->itargetobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_itargetobjectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_MONSTERSTATE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_MONSTERSTATE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_MONSTERSTATE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_MONSTERSTATE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_MONSTERSTATE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_MONSTERSTATE)
    MergeFrom(*source);
  }
}

void S_MONSTERSTATE::MergeFrom(const S_MONSTERSTATE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MONSTERSTATE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vtargetpos_.MergeFrom(from.vtargetpos_);
  if (!from.strstate().empty()) {
    _internal_set_strstate(from._internal_strstate());
  }
  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.itargetobjectlayer() != 0) {
    _internal_set_itargetobjectlayer(from._internal_itargetobjectlayer());
  }
  if (from.itargetobjectid() != 0) {
    _internal_set_itargetobjectid(from._internal_itargetobjectid());
  }
}

void S_MONSTERSTATE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_MONSTERSTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_MONSTERSTATE::CopyFrom(const S_MONSTERSTATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MONSTERSTATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MONSTERSTATE::IsInitialized() const {
  return true;
}

void S_MONSTERSTATE::InternalSwap(S_MONSTERSTATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vtargetpos_.InternalSwap(&other->vtargetpos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &strstate_, GetArenaForAllocation(),
      &other->strstate_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MONSTERSTATE, itargetobjectid_)
      + sizeof(S_MONSTERSTATE::itargetobjectid_)
      - PROTOBUF_FIELD_OFFSET(S_MONSTERSTATE, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MONSTERSTATE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class S_PLAYERLEVELMOVE::_Internal {
 public:
};

S_PLAYERLEVELMOVE::S_PLAYERLEVELMOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PLAYERLEVELMOVE)
}
S_PLAYERLEVELMOVE::S_PLAYERLEVELMOVE(const S_PLAYERLEVELMOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&icurrlevel_, &from.icurrlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&inextlevel_) -
    reinterpret_cast<char*>(&icurrlevel_)) + sizeof(inextlevel_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PLAYERLEVELMOVE)
}

void S_PLAYERLEVELMOVE::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&icurrlevel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inextlevel_) -
    reinterpret_cast<char*>(&icurrlevel_)) + sizeof(inextlevel_));
}

S_PLAYERLEVELMOVE::~S_PLAYERLEVELMOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_PLAYERLEVELMOVE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_PLAYERLEVELMOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PLAYERLEVELMOVE::ArenaDtor(void* object) {
  S_PLAYERLEVELMOVE* _this = reinterpret_cast< S_PLAYERLEVELMOVE* >(object);
  (void)_this;
}
void S_PLAYERLEVELMOVE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_PLAYERLEVELMOVE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_PLAYERLEVELMOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PLAYERLEVELMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&icurrlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inextlevel_) -
      reinterpret_cast<char*>(&icurrlevel_)) + sizeof(inextlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PLAYERLEVELMOVE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iCurrLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          icurrlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iNextLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inextlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_PLAYERLEVELMOVE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PLAYERLEVELMOVE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iCurrLevel = 1;
  if (this->icurrlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_icurrlevel(), target);
  }

  // int32 iNextLevel = 2;
  if (this->inextlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_inextlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PLAYERLEVELMOVE)
  return target;
}

size_t S_PLAYERLEVELMOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PLAYERLEVELMOVE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iCurrLevel = 1;
  if (this->icurrlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_icurrlevel());
  }

  // int32 iNextLevel = 2;
  if (this->inextlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inextlevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_PLAYERLEVELMOVE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_PLAYERLEVELMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  const S_PLAYERLEVELMOVE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_PLAYERLEVELMOVE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_PLAYERLEVELMOVE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_PLAYERLEVELMOVE)
    MergeFrom(*source);
  }
}

void S_PLAYERLEVELMOVE::MergeFrom(const S_PLAYERLEVELMOVE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PLAYERLEVELMOVE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.icurrlevel() != 0) {
    _internal_set_icurrlevel(from._internal_icurrlevel());
  }
  if (from.inextlevel() != 0) {
    _internal_set_inextlevel(from._internal_inextlevel());
  }
}

void S_PLAYERLEVELMOVE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_PLAYERLEVELMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_PLAYERLEVELMOVE::CopyFrom(const S_PLAYERLEVELMOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PLAYERLEVELMOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PLAYERLEVELMOVE::IsInitialized() const {
  return true;
}

void S_PLAYERLEVELMOVE::InternalSwap(S_PLAYERLEVELMOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PLAYERLEVELMOVE, inextlevel_)
      + sizeof(S_PLAYERLEVELMOVE::inextlevel_)
      - PROTOBUF_FIELD_OFFSET(S_PLAYERLEVELMOVE, icurrlevel_)>(
          reinterpret_cast<char*>(&icurrlevel_),
          reinterpret_cast<char*>(&other->icurrlevel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PLAYERLEVELMOVE::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class S_DELETEGAMEOBJECT::_Internal {
 public:
};

S_DELETEGAMEOBJECT::S_DELETEGAMEOBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DELETEGAMEOBJECT)
}
S_DELETEGAMEOBJECT::S_DELETEGAMEOBJECT(const S_DELETEGAMEOBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&iobjectid_, &from.iobjectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ilayer_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DELETEGAMEOBJECT)
}

void S_DELETEGAMEOBJECT::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&iobjectid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ilayer_) -
    reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
}

S_DELETEGAMEOBJECT::~S_DELETEGAMEOBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_DELETEGAMEOBJECT)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S_DELETEGAMEOBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_DELETEGAMEOBJECT::ArenaDtor(void* object) {
  S_DELETEGAMEOBJECT* _this = reinterpret_cast< S_DELETEGAMEOBJECT* >(object);
  (void)_this;
}
void S_DELETEGAMEOBJECT::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S_DELETEGAMEOBJECT::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_DELETEGAMEOBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DELETEGAMEOBJECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iobjectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ilayer_) -
      reinterpret_cast<char*>(&iobjectid_)) + sizeof(ilayer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DELETEGAMEOBJECT::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 iObjectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ilevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iLayer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ilayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S_DELETEGAMEOBJECT::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DELETEGAMEOBJECT)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iobjectid(), target);
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ilevel(), target);
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ilayer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DELETEGAMEOBJECT)
  return target;
}

size_t S_DELETEGAMEOBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DELETEGAMEOBJECT)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iObjectID = 1;
  if (this->iobjectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iobjectid());
  }

  // int32 iLevel = 2;
  if (this->ilevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilevel());
  }

  // int32 iLayer = 3;
  if (this->ilayer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ilayer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S_DELETEGAMEOBJECT::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.S_DELETEGAMEOBJECT)
  GOOGLE_DCHECK_NE(&from, this);
  const S_DELETEGAMEOBJECT* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S_DELETEGAMEOBJECT>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.S_DELETEGAMEOBJECT)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.S_DELETEGAMEOBJECT)
    MergeFrom(*source);
  }
}

void S_DELETEGAMEOBJECT::MergeFrom(const S_DELETEGAMEOBJECT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DELETEGAMEOBJECT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iobjectid() != 0) {
    _internal_set_iobjectid(from._internal_iobjectid());
  }
  if (from.ilevel() != 0) {
    _internal_set_ilevel(from._internal_ilevel());
  }
  if (from.ilayer() != 0) {
    _internal_set_ilayer(from._internal_ilayer());
  }
}

void S_DELETEGAMEOBJECT::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.S_DELETEGAMEOBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S_DELETEGAMEOBJECT::CopyFrom(const S_DELETEGAMEOBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DELETEGAMEOBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DELETEGAMEOBJECT::IsInitialized() const {
  return true;
}

void S_DELETEGAMEOBJECT::InternalSwap(S_DELETEGAMEOBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_DELETEGAMEOBJECT, ilayer_)
      + sizeof(S_DELETEGAMEOBJECT::ilayer_)
      - PROTOBUF_FIELD_OFFSET(S_DELETEGAMEOBJECT, iobjectid_)>(
          reinterpret_cast<char*>(&iobjectid_),
          reinterpret_cast<char*>(&other->iobjectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DELETEGAMEOBJECT::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::S_TIME* Arena::CreateMaybeMessage< ::Protocol::S_TIME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_TIME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN* Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OPEN_LEVEL* Arena::CreateMaybeMessage< ::Protocol::S_OPEN_LEVEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OPEN_LEVEL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEVEL_STATE* Arena::CreateMaybeMessage< ::Protocol::S_LEVEL_STATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEVEL_STATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATE_OBJCECT* Arena::CreateMaybeMessage< ::Protocol::S_CREATE_OBJCECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATE_OBJCECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHARACTER_NAME* Arena::CreateMaybeMessage< ::Protocol::S_CHARACTER_NAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHARACTER_NAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MATRIX* Arena::CreateMaybeMessage< ::Protocol::S_MATRIX >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MATRIX >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ANIMATION* Arena::CreateMaybeMessage< ::Protocol::S_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ANIMATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_OBJECTINFO* Arena::CreateMaybeMessage< ::Protocol::S_OBJECTINFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_OBJECTINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_STATE* Arena::CreateMaybeMessage< ::Protocol::S_STATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_STATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_COLLIDERSTATE* Arena::CreateMaybeMessage< ::Protocol::S_COLLIDERSTATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_COLLIDERSTATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_COLLISION* Arena::CreateMaybeMessage< ::Protocol::S_COLLISION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_COLLISION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_NICKNAME* Arena::CreateMaybeMessage< ::Protocol::S_NICKNAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_NICKNAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_USERINFO* Arena::CreateMaybeMessage< ::Protocol::S_USERINFO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_USERINFO >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_NEARTARGET* Arena::CreateMaybeMessage< ::Protocol::S_NEARTARGET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_NEARTARGET >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SETSKILL* Arena::CreateMaybeMessage< ::Protocol::S_SETSKILL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SETSKILL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SLOWMOTION* Arena::CreateMaybeMessage< ::Protocol::S_SLOWMOTION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SLOWMOTION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CAMSHAKE* Arena::CreateMaybeMessage< ::Protocol::S_CAMSHAKE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CAMSHAKE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_EVENT* Arena::CreateMaybeMessage< ::Protocol::S_EVENT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EVENT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SKILLEXPLOSION* Arena::CreateMaybeMessage< ::Protocol::S_SKILLEXPLOSION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SKILLEXPLOSION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_HP* Arena::CreateMaybeMessage< ::Protocol::S_HP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_HP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATE_PLAYER* Arena::CreateMaybeMessage< ::Protocol::S_CREATE_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATE_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT* Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MONSTERSTATE* Arena::CreateMaybeMessage< ::Protocol::S_MONSTERSTATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MONSTERSTATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PLAYERLEVELMOVE* Arena::CreateMaybeMessage< ::Protocol::S_PLAYERLEVELMOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PLAYERLEVELMOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DELETEGAMEOBJECT* Arena::CreateMaybeMessage< ::Protocol::S_DELETEGAMEOBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DELETEGAMEOBJECT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
