// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class S_ANIMATION;
struct S_ANIMATIONDefaultTypeInternal;
extern S_ANIMATIONDefaultTypeInternal _S_ANIMATION_default_instance_;
class S_CAMSHAKE;
struct S_CAMSHAKEDefaultTypeInternal;
extern S_CAMSHAKEDefaultTypeInternal _S_CAMSHAKE_default_instance_;
class S_CHARACTER_NAME;
struct S_CHARACTER_NAMEDefaultTypeInternal;
extern S_CHARACTER_NAMEDefaultTypeInternal _S_CHARACTER_NAME_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_COLLIDERSTATE;
struct S_COLLIDERSTATEDefaultTypeInternal;
extern S_COLLIDERSTATEDefaultTypeInternal _S_COLLIDERSTATE_default_instance_;
class S_COLLISION;
struct S_COLLISIONDefaultTypeInternal;
extern S_COLLISIONDefaultTypeInternal _S_COLLISION_default_instance_;
class S_CREATE_OBJCECT;
struct S_CREATE_OBJCECTDefaultTypeInternal;
extern S_CREATE_OBJCECTDefaultTypeInternal _S_CREATE_OBJCECT_default_instance_;
class S_CREATE_PLAYER;
struct S_CREATE_PLAYERDefaultTypeInternal;
extern S_CREATE_PLAYERDefaultTypeInternal _S_CREATE_PLAYER_default_instance_;
class S_DELETEGAMEOBJECT;
struct S_DELETEGAMEOBJECTDefaultTypeInternal;
extern S_DELETEGAMEOBJECTDefaultTypeInternal _S_DELETEGAMEOBJECT_default_instance_;
class S_EVENT;
struct S_EVENTDefaultTypeInternal;
extern S_EVENTDefaultTypeInternal _S_EVENT_default_instance_;
class S_HP;
struct S_HPDefaultTypeInternal;
extern S_HPDefaultTypeInternal _S_HP_default_instance_;
class S_IDENTITY;
struct S_IDENTITYDefaultTypeInternal;
extern S_IDENTITYDefaultTypeInternal _S_IDENTITY_default_instance_;
class S_LEVEL_STATE;
struct S_LEVEL_STATEDefaultTypeInternal;
extern S_LEVEL_STATEDefaultTypeInternal _S_LEVEL_STATE_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MATRIX;
struct S_MATRIXDefaultTypeInternal;
extern S_MATRIXDefaultTypeInternal _S_MATRIX_default_instance_;
class S_MONSTERSTATE;
struct S_MONSTERSTATEDefaultTypeInternal;
extern S_MONSTERSTATEDefaultTypeInternal _S_MONSTERSTATE_default_instance_;
class S_NEARTARGET;
struct S_NEARTARGETDefaultTypeInternal;
extern S_NEARTARGETDefaultTypeInternal _S_NEARTARGET_default_instance_;
class S_NICKNAME;
struct S_NICKNAMEDefaultTypeInternal;
extern S_NICKNAMEDefaultTypeInternal _S_NICKNAME_default_instance_;
class S_OBJECTINFO;
struct S_OBJECTINFODefaultTypeInternal;
extern S_OBJECTINFODefaultTypeInternal _S_OBJECTINFO_default_instance_;
class S_OPEN_LEVEL;
struct S_OPEN_LEVELDefaultTypeInternal;
extern S_OPEN_LEVELDefaultTypeInternal _S_OPEN_LEVEL_default_instance_;
class S_PLAYERLEVELMOVE;
struct S_PLAYERLEVELMOVEDefaultTypeInternal;
extern S_PLAYERLEVELMOVEDefaultTypeInternal _S_PLAYERLEVELMOVE_default_instance_;
class S_SETSKILL;
struct S_SETSKILLDefaultTypeInternal;
extern S_SETSKILLDefaultTypeInternal _S_SETSKILL_default_instance_;
class S_SKILLEXPLOSION;
struct S_SKILLEXPLOSIONDefaultTypeInternal;
extern S_SKILLEXPLOSIONDefaultTypeInternal _S_SKILLEXPLOSION_default_instance_;
class S_SLOWMOTION;
struct S_SLOWMOTIONDefaultTypeInternal;
extern S_SLOWMOTIONDefaultTypeInternal _S_SLOWMOTION_default_instance_;
class S_STATE;
struct S_STATEDefaultTypeInternal;
extern S_STATEDefaultTypeInternal _S_STATE_default_instance_;
class S_TIME;
struct S_TIMEDefaultTypeInternal;
extern S_TIMEDefaultTypeInternal _S_TIME_default_instance_;
class S_USERINFO;
struct S_USERINFODefaultTypeInternal;
extern S_USERINFODefaultTypeInternal _S_USERINFO_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::S_ANIMATION* Arena::CreateMaybeMessage<::Protocol::S_ANIMATION>(Arena*);
template<> ::Protocol::S_CAMSHAKE* Arena::CreateMaybeMessage<::Protocol::S_CAMSHAKE>(Arena*);
template<> ::Protocol::S_CHARACTER_NAME* Arena::CreateMaybeMessage<::Protocol::S_CHARACTER_NAME>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_COLLIDERSTATE* Arena::CreateMaybeMessage<::Protocol::S_COLLIDERSTATE>(Arena*);
template<> ::Protocol::S_COLLISION* Arena::CreateMaybeMessage<::Protocol::S_COLLISION>(Arena*);
template<> ::Protocol::S_CREATE_OBJCECT* Arena::CreateMaybeMessage<::Protocol::S_CREATE_OBJCECT>(Arena*);
template<> ::Protocol::S_CREATE_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_CREATE_PLAYER>(Arena*);
template<> ::Protocol::S_DELETEGAMEOBJECT* Arena::CreateMaybeMessage<::Protocol::S_DELETEGAMEOBJECT>(Arena*);
template<> ::Protocol::S_EVENT* Arena::CreateMaybeMessage<::Protocol::S_EVENT>(Arena*);
template<> ::Protocol::S_HP* Arena::CreateMaybeMessage<::Protocol::S_HP>(Arena*);
template<> ::Protocol::S_IDENTITY* Arena::CreateMaybeMessage<::Protocol::S_IDENTITY>(Arena*);
template<> ::Protocol::S_LEVEL_STATE* Arena::CreateMaybeMessage<::Protocol::S_LEVEL_STATE>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MATRIX* Arena::CreateMaybeMessage<::Protocol::S_MATRIX>(Arena*);
template<> ::Protocol::S_MONSTERSTATE* Arena::CreateMaybeMessage<::Protocol::S_MONSTERSTATE>(Arena*);
template<> ::Protocol::S_NEARTARGET* Arena::CreateMaybeMessage<::Protocol::S_NEARTARGET>(Arena*);
template<> ::Protocol::S_NICKNAME* Arena::CreateMaybeMessage<::Protocol::S_NICKNAME>(Arena*);
template<> ::Protocol::S_OBJECTINFO* Arena::CreateMaybeMessage<::Protocol::S_OBJECTINFO>(Arena*);
template<> ::Protocol::S_OPEN_LEVEL* Arena::CreateMaybeMessage<::Protocol::S_OPEN_LEVEL>(Arena*);
template<> ::Protocol::S_PLAYERLEVELMOVE* Arena::CreateMaybeMessage<::Protocol::S_PLAYERLEVELMOVE>(Arena*);
template<> ::Protocol::S_SETSKILL* Arena::CreateMaybeMessage<::Protocol::S_SETSKILL>(Arena*);
template<> ::Protocol::S_SKILLEXPLOSION* Arena::CreateMaybeMessage<::Protocol::S_SKILLEXPLOSION>(Arena*);
template<> ::Protocol::S_SLOWMOTION* Arena::CreateMaybeMessage<::Protocol::S_SLOWMOTION>(Arena*);
template<> ::Protocol::S_STATE* Arena::CreateMaybeMessage<::Protocol::S_STATE>(Arena*);
template<> ::Protocol::S_TIME* Arena::CreateMaybeMessage<::Protocol::S_TIME>(Arena*);
template<> ::Protocol::S_USERINFO* Arena::CreateMaybeMessage<::Protocol::S_USERINFO>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_TIME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_TIME) */ {
 public:
  inline S_TIME() : S_TIME(nullptr) {}
  ~S_TIME() override;
  explicit constexpr S_TIME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_TIME(const S_TIME& from);
  S_TIME(S_TIME&& from) noexcept
    : S_TIME() {
    *this = ::std::move(from);
  }

  inline S_TIME& operator=(const S_TIME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_TIME& operator=(S_TIME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_TIME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_TIME* internal_default_instance() {
    return reinterpret_cast<const S_TIME*>(
               &_S_TIME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_TIME& a, S_TIME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_TIME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_TIME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_TIME* New() const final {
    return new S_TIME();
  }

  S_TIME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_TIME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_TIME& from);
  void MergeFrom(const S_TIME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_TIME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_TIME";
  }
  protected:
  explicit S_TIME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kISendTickFieldNumber = 1,
    kIServerMinuteFieldNumber = 2,
    kFServerSecondFieldNumber = 3,
  };
  // uint64 iSendTick = 1;
  void clear_isendtick();
  ::PROTOBUF_NAMESPACE_ID::uint64 isendtick() const;
  void set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_isendtick() const;
  void _internal_set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 iServerMinute = 2;
  void clear_iserverminute();
  ::PROTOBUF_NAMESPACE_ID::uint32 iserverminute() const;
  void set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iserverminute() const;
  void _internal_set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float fServerSecond = 3;
  void clear_fserversecond();
  float fserversecond() const;
  void set_fserversecond(float value);
  private:
  float _internal_fserversecond() const;
  void _internal_set_fserversecond(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_TIME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 isendtick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iserverminute_;
  float fserversecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNickNameFieldNumber = 1,
    kIClassFieldNumber = 2,
  };
  // bytes strNickName = 1;
  void clear_strnickname();
  const std::string& strnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strnickname();
  void set_allocated_strnickname(std::string* strnickname);
  private:
  const std::string& _internal_strnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnickname(const std::string& value);
  std::string* _internal_mutable_strnickname();
  public:

  // int32 iClass = 2;
  void clear_iclass();
  ::PROTOBUF_NAMESPACE_ID::int32 iclass() const;
  void set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iclass() const;
  void _internal_set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnickname_;
  ::PROTOBUF_NAMESPACE_ID::int32 iclass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OPEN_LEVEL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OPEN_LEVEL) */ {
 public:
  inline S_OPEN_LEVEL() : S_OPEN_LEVEL(nullptr) {}
  ~S_OPEN_LEVEL() override;
  explicit constexpr S_OPEN_LEVEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OPEN_LEVEL(const S_OPEN_LEVEL& from);
  S_OPEN_LEVEL(S_OPEN_LEVEL&& from) noexcept
    : S_OPEN_LEVEL() {
    *this = ::std::move(from);
  }

  inline S_OPEN_LEVEL& operator=(const S_OPEN_LEVEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OPEN_LEVEL& operator=(S_OPEN_LEVEL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OPEN_LEVEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OPEN_LEVEL* internal_default_instance() {
    return reinterpret_cast<const S_OPEN_LEVEL*>(
               &_S_OPEN_LEVEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_OPEN_LEVEL& a, S_OPEN_LEVEL& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OPEN_LEVEL* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OPEN_LEVEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OPEN_LEVEL* New() const final {
    return new S_OPEN_LEVEL();
  }

  S_OPEN_LEVEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OPEN_LEVEL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OPEN_LEVEL& from);
  void MergeFrom(const S_OPEN_LEVEL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OPEN_LEVEL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OPEN_LEVEL";
  }
  protected:
  explicit S_OPEN_LEVEL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kILevelIDFieldNumber = 1,
  };
  // uint64 iLevelID = 1;
  void clear_ilevelid();
  ::PROTOBUF_NAMESPACE_ID::uint64 ilevelid() const;
  void set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ilevelid() const;
  void _internal_set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OPEN_LEVEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ilevelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LEVEL_STATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LEVEL_STATE) */ {
 public:
  inline S_LEVEL_STATE() : S_LEVEL_STATE(nullptr) {}
  ~S_LEVEL_STATE() override;
  explicit constexpr S_LEVEL_STATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEVEL_STATE(const S_LEVEL_STATE& from);
  S_LEVEL_STATE(S_LEVEL_STATE&& from) noexcept
    : S_LEVEL_STATE() {
    *this = ::std::move(from);
  }

  inline S_LEVEL_STATE& operator=(const S_LEVEL_STATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEVEL_STATE& operator=(S_LEVEL_STATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEVEL_STATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEVEL_STATE* internal_default_instance() {
    return reinterpret_cast<const S_LEVEL_STATE*>(
               &_S_LEVEL_STATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_LEVEL_STATE& a, S_LEVEL_STATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEVEL_STATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEVEL_STATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LEVEL_STATE* New() const final {
    return new S_LEVEL_STATE();
  }

  S_LEVEL_STATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LEVEL_STATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LEVEL_STATE& from);
  void MergeFrom(const S_LEVEL_STATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LEVEL_STATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LEVEL_STATE";
  }
  protected:
  explicit S_LEVEL_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kILevelStateFieldNumber = 1,
  };
  // uint32 iLevelState = 1;
  void clear_ilevelstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevelstate() const;
  void set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilevelstate() const;
  void _internal_set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LEVEL_STATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevelstate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_OBJCECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_OBJCECT) */ {
 public:
  inline S_CREATE_OBJCECT() : S_CREATE_OBJCECT(nullptr) {}
  ~S_CREATE_OBJCECT() override;
  explicit constexpr S_CREATE_OBJCECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_OBJCECT(const S_CREATE_OBJCECT& from);
  S_CREATE_OBJCECT(S_CREATE_OBJCECT&& from) noexcept
    : S_CREATE_OBJCECT() {
    *this = ::std::move(from);
  }

  inline S_CREATE_OBJCECT& operator=(const S_CREATE_OBJCECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_OBJCECT& operator=(S_CREATE_OBJCECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_OBJCECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_OBJCECT* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_OBJCECT*>(
               &_S_CREATE_OBJCECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_CREATE_OBJCECT& a, S_CREATE_OBJCECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_OBJCECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_OBJCECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE_OBJCECT* New() const final {
    return new S_CREATE_OBJCECT();
  }

  S_CREATE_OBJCECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE_OBJCECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE_OBJCECT& from);
  void MergeFrom(const S_CREATE_OBJCECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_OBJCECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_OBJCECT";
  }
  protected:
  explicit S_CREATE_OBJCECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVPosFieldNumber = 7,
    kTMonsterInfoFieldNumber = 8,
    kStrNameFieldNumber = 5,
    kIObjectIDFieldNumber = 1,
    kIObjectTypeFieldNumber = 2,
    kILevelFieldNumber = 3,
    kILayerFieldNumber = 4,
    kBControllFieldNumber = 6,
  };
  // repeated float vPos = 7 [packed = true];
  int vpos_size() const;
  private:
  int _internal_vpos_size() const;
  public:
  void clear_vpos();
  private:
  float _internal_vpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vpos() const;
  void _internal_add_vpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vpos();
  public:
  float vpos(int index) const;
  void set_vpos(int index, float value);
  void add_vpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vpos();

  // repeated .Protocol.MonsterCreateInfo tMonsterInfo = 8;
  int tmonsterinfo_size() const;
  private:
  int _internal_tmonsterinfo_size() const;
  public:
  void clear_tmonsterinfo();
  ::Protocol::MonsterCreateInfo* mutable_tmonsterinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterCreateInfo >*
      mutable_tmonsterinfo();
  private:
  const ::Protocol::MonsterCreateInfo& _internal_tmonsterinfo(int index) const;
  ::Protocol::MonsterCreateInfo* _internal_add_tmonsterinfo();
  public:
  const ::Protocol::MonsterCreateInfo& tmonsterinfo(int index) const;
  ::Protocol::MonsterCreateInfo* add_tmonsterinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterCreateInfo >&
      tmonsterinfo() const;

  // string strName = 5;
  void clear_strname();
  const std::string& strname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strname();
  void set_allocated_strname(std::string* strname);
  private:
  const std::string& _internal_strname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strname(const std::string& value);
  std::string* _internal_mutable_strname();
  public:

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 iObjectType = 2;
  void clear_iobjecttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjecttype() const;
  void set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iobjecttype() const;
  void _internal_set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iLevel = 3;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 iLayer = 4;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::uint32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool bControll = 6;
  void clear_bcontroll();
  bool bcontroll() const;
  void set_bcontroll(bool value);
  private:
  bool _internal_bcontroll() const;
  void _internal_set_bcontroll(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_OBJCECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vpos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterCreateInfo > tmonsterinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strname_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjecttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ilayer_;
  bool bcontroll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHARACTER_NAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHARACTER_NAME) */ {
 public:
  inline S_CHARACTER_NAME() : S_CHARACTER_NAME(nullptr) {}
  ~S_CHARACTER_NAME() override;
  explicit constexpr S_CHARACTER_NAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHARACTER_NAME(const S_CHARACTER_NAME& from);
  S_CHARACTER_NAME(S_CHARACTER_NAME&& from) noexcept
    : S_CHARACTER_NAME() {
    *this = ::std::move(from);
  }

  inline S_CHARACTER_NAME& operator=(const S_CHARACTER_NAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHARACTER_NAME& operator=(S_CHARACTER_NAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHARACTER_NAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHARACTER_NAME* internal_default_instance() {
    return reinterpret_cast<const S_CHARACTER_NAME*>(
               &_S_CHARACTER_NAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_CHARACTER_NAME& a, S_CHARACTER_NAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHARACTER_NAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHARACTER_NAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHARACTER_NAME* New() const final {
    return new S_CHARACTER_NAME();
  }

  S_CHARACTER_NAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHARACTER_NAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHARACTER_NAME& from);
  void MergeFrom(const S_CHARACTER_NAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHARACTER_NAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHARACTER_NAME";
  }
  protected:
  explicit S_CHARACTER_NAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNameFieldNumber = 1,
  };
  // string strName = 1;
  void clear_strname();
  const std::string& strname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strname();
  void set_allocated_strname(std::string* strname);
  private:
  const std::string& _internal_strname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strname(const std::string& value);
  std::string* _internal_mutable_strname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHARACTER_NAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MATRIX final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MATRIX) */ {
 public:
  inline S_MATRIX() : S_MATRIX(nullptr) {}
  ~S_MATRIX() override;
  explicit constexpr S_MATRIX(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATRIX(const S_MATRIX& from);
  S_MATRIX(S_MATRIX&& from) noexcept
    : S_MATRIX() {
    *this = ::std::move(from);
  }

  inline S_MATRIX& operator=(const S_MATRIX& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATRIX& operator=(S_MATRIX&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATRIX& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATRIX* internal_default_instance() {
    return reinterpret_cast<const S_MATRIX*>(
               &_S_MATRIX_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_MATRIX& a, S_MATRIX& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATRIX* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATRIX* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MATRIX* New() const final {
    return new S_MATRIX();
  }

  S_MATRIX* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MATRIX>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MATRIX& from);
  void MergeFrom(const S_MATRIX& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATRIX* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MATRIX";
  }
  protected:
  explicit S_MATRIX(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixFieldNumber = 4,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
  };
  // repeated float Matrix = 4 [packed = true];
  int matrix_size() const;
  private:
  int _internal_matrix_size() const;
  public:
  void clear_matrix();
  private:
  float _internal_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_matrix() const;
  void _internal_add_matrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_matrix();
  public:
  float matrix(int index) const;
  void set_matrix(int index, float value);
  void add_matrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_matrix();

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MATRIX)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > matrix_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ANIMATION) */ {
 public:
  inline S_ANIMATION() : S_ANIMATION(nullptr) {}
  ~S_ANIMATION() override;
  explicit constexpr S_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ANIMATION(const S_ANIMATION& from);
  S_ANIMATION(S_ANIMATION&& from) noexcept
    : S_ANIMATION() {
    *this = ::std::move(from);
  }

  inline S_ANIMATION& operator=(const S_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ANIMATION& operator=(S_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const S_ANIMATION*>(
               &_S_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_ANIMATION& a, S_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ANIMATION* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ANIMATION* New() const final {
    return new S_ANIMATION();
  }

  S_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ANIMATION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ANIMATION& from);
  void MergeFrom(const S_ANIMATION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ANIMATION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ANIMATION";
  }
  protected:
  explicit S_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kIAnimIndexFieldNumber = 4,
    kFChangeTimeFieldNumber = 5,
    kIStartFrameFieldNumber = 6,
    kIChangeFrameFieldNumber = 7,
  };
  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iAnimIndex = 4;
  void clear_ianimindex();
  ::PROTOBUF_NAMESPACE_ID::int32 ianimindex() const;
  void set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ianimindex() const;
  void _internal_set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float fChangeTime = 5;
  void clear_fchangetime();
  float fchangetime() const;
  void set_fchangetime(float value);
  private:
  float _internal_fchangetime() const;
  void _internal_set_fchangetime(float value);
  public:

  // int32 iStartFrame = 6;
  void clear_istartframe();
  ::PROTOBUF_NAMESPACE_ID::int32 istartframe() const;
  void set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istartframe() const;
  void _internal_set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iChangeFrame = 7;
  void clear_ichangeframe();
  ::PROTOBUF_NAMESPACE_ID::int32 ichangeframe() const;
  void set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ichangeframe() const;
  void _internal_set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 ianimindex_;
  float fchangetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 istartframe_;
  ::PROTOBUF_NAMESPACE_ID::int32 ichangeframe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OBJECTINFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OBJECTINFO) */ {
 public:
  inline S_OBJECTINFO() : S_OBJECTINFO(nullptr) {}
  ~S_OBJECTINFO() override;
  explicit constexpr S_OBJECTINFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OBJECTINFO(const S_OBJECTINFO& from);
  S_OBJECTINFO(S_OBJECTINFO&& from) noexcept
    : S_OBJECTINFO() {
    *this = ::std::move(from);
  }

  inline S_OBJECTINFO& operator=(const S_OBJECTINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OBJECTINFO& operator=(S_OBJECTINFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OBJECTINFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OBJECTINFO* internal_default_instance() {
    return reinterpret_cast<const S_OBJECTINFO*>(
               &_S_OBJECTINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_OBJECTINFO& a, S_OBJECTINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OBJECTINFO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OBJECTINFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_OBJECTINFO* New() const final {
    return new S_OBJECTINFO();
  }

  S_OBJECTINFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_OBJECTINFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_OBJECTINFO& from);
  void MergeFrom(const S_OBJECTINFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OBJECTINFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OBJECTINFO";
  }
  protected:
  explicit S_OBJECTINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTObjectFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo tObject = 1;
  int tobject_size() const;
  private:
  int _internal_tobject_size() const;
  public:
  void clear_tobject();
  ::Protocol::ObjectInfo* mutable_tobject(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_tobject();
  private:
  const ::Protocol::ObjectInfo& _internal_tobject(int index) const;
  ::Protocol::ObjectInfo* _internal_add_tobject();
  public:
  const ::Protocol::ObjectInfo& tobject(int index) const;
  ::Protocol::ObjectInfo* add_tobject();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      tobject() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_OBJECTINFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > tobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_STATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_STATE) */ {
 public:
  inline S_STATE() : S_STATE(nullptr) {}
  ~S_STATE() override;
  explicit constexpr S_STATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_STATE(const S_STATE& from);
  S_STATE(S_STATE&& from) noexcept
    : S_STATE() {
    *this = ::std::move(from);
  }

  inline S_STATE& operator=(const S_STATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_STATE& operator=(S_STATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_STATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_STATE* internal_default_instance() {
    return reinterpret_cast<const S_STATE*>(
               &_S_STATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_STATE& a, S_STATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_STATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_STATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_STATE* New() const final {
    return new S_STATE();
  }

  S_STATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_STATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_STATE& from);
  void MergeFrom(const S_STATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_STATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_STATE";
  }
  protected:
  explicit S_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrStateFieldNumber = 2,
    kTObjectFieldNumber = 1,
    kITargetObjectLayerFieldNumber = 3,
    kITargetObjectIDFieldNumber = 4,
    kIHitObjectLayerFieldNumber = 5,
    kIHitObjectIDFieldNumber = 6,
    kIWeaponIndexFieldNumber = 7,
  };
  // string strState = 2;
  void clear_strstate();
  const std::string& strstate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strstate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strstate();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strstate();
  void set_allocated_strstate(std::string* strstate);
  private:
  const std::string& _internal_strstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstate(const std::string& value);
  std::string* _internal_mutable_strstate();
  public:

  // .Protocol.ObjectInfo tObject = 1;
  bool has_tobject() const;
  private:
  bool _internal_has_tobject() const;
  public:
  void clear_tobject();
  const ::Protocol::ObjectInfo& tobject() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::ObjectInfo* release_tobject();
  ::Protocol::ObjectInfo* mutable_tobject();
  void set_allocated_tobject(::Protocol::ObjectInfo* tobject);
  private:
  const ::Protocol::ObjectInfo& _internal_tobject() const;
  ::Protocol::ObjectInfo* _internal_mutable_tobject();
  public:
  void unsafe_arena_set_allocated_tobject(
      ::Protocol::ObjectInfo* tobject);
  ::Protocol::ObjectInfo* unsafe_arena_release_tobject();

  // int32 iTargetObjectLayer = 3;
  void clear_itargetobjectlayer();
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectlayer() const;
  void set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itargetobjectlayer() const;
  void _internal_set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iTargetObjectID = 4;
  void clear_itargetobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectid() const;
  void set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itargetobjectid() const;
  void _internal_set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iHitObjectLayer = 5;
  void clear_ihitobjectlayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ihitobjectlayer() const;
  void set_ihitobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ihitobjectlayer() const;
  void _internal_set_ihitobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iHitObjectID = 6;
  void clear_ihitobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 ihitobjectid() const;
  void set_ihitobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ihitobjectid() const;
  void _internal_set_ihitobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iWeaponIndex = 7;
  void clear_iweaponindex();
  ::PROTOBUF_NAMESPACE_ID::int32 iweaponindex() const;
  void set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iweaponindex() const;
  void _internal_set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_STATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstate_;
  ::Protocol::ObjectInfo* tobject_;
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectlayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ihitobjectlayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 ihitobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 iweaponindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_COLLIDERSTATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_COLLIDERSTATE) */ {
 public:
  inline S_COLLIDERSTATE() : S_COLLIDERSTATE(nullptr) {}
  ~S_COLLIDERSTATE() override;
  explicit constexpr S_COLLIDERSTATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_COLLIDERSTATE(const S_COLLIDERSTATE& from);
  S_COLLIDERSTATE(S_COLLIDERSTATE&& from) noexcept
    : S_COLLIDERSTATE() {
    *this = ::std::move(from);
  }

  inline S_COLLIDERSTATE& operator=(const S_COLLIDERSTATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_COLLIDERSTATE& operator=(S_COLLIDERSTATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_COLLIDERSTATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_COLLIDERSTATE* internal_default_instance() {
    return reinterpret_cast<const S_COLLIDERSTATE*>(
               &_S_COLLIDERSTATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_COLLIDERSTATE& a, S_COLLIDERSTATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_COLLIDERSTATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_COLLIDERSTATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_COLLIDERSTATE* New() const final {
    return new S_COLLIDERSTATE();
  }

  S_COLLIDERSTATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_COLLIDERSTATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_COLLIDERSTATE& from);
  void MergeFrom(const S_COLLIDERSTATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_COLLIDERSTATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_COLLIDERSTATE";
  }
  protected:
  explicit S_COLLIDERSTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVOffsetFieldNumber = 6,
    kTChildFieldNumber = 11,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kIColLayerFieldNumber = 4,
    kFRadiusFieldNumber = 5,
    kIAttackTypeFieldNumber = 8,
    kBActiveFieldNumber = 7,
    kBSlowFieldNumber = 10,
    kIAttackFieldNumber = 9,
  };
  // repeated float vOffset = 6 [packed = true];
  int voffset_size() const;
  private:
  int _internal_voffset_size() const;
  public:
  void clear_voffset();
  private:
  float _internal_voffset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_voffset() const;
  void _internal_add_voffset(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_voffset();
  public:
  float voffset(int index) const;
  void set_voffset(int index, float value);
  void add_voffset(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voffset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voffset();

  // repeated .Protocol.ChildCollider tChild = 11;
  int tchild_size() const;
  private:
  int _internal_tchild_size() const;
  public:
  void clear_tchild();
  ::Protocol::ChildCollider* mutable_tchild(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChildCollider >*
      mutable_tchild();
  private:
  const ::Protocol::ChildCollider& _internal_tchild(int index) const;
  ::Protocol::ChildCollider* _internal_add_tchild();
  public:
  const ::Protocol::ChildCollider& tchild(int index) const;
  ::Protocol::ChildCollider* add_tchild();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChildCollider >&
      tchild() const;

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iColLayer = 4;
  void clear_icollayer();
  ::PROTOBUF_NAMESPACE_ID::int32 icollayer() const;
  void set_icollayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icollayer() const;
  void _internal_set_icollayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float fRadius = 5;
  void clear_fradius();
  float fradius() const;
  void set_fradius(float value);
  private:
  float _internal_fradius() const;
  void _internal_set_fradius(float value);
  public:

  // int32 iAttackType = 8;
  void clear_iattacktype();
  ::PROTOBUF_NAMESPACE_ID::int32 iattacktype() const;
  void set_iattacktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iattacktype() const;
  void _internal_set_iattacktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bActive = 7;
  void clear_bactive();
  bool bactive() const;
  void set_bactive(bool value);
  private:
  bool _internal_bactive() const;
  void _internal_set_bactive(bool value);
  public:

  // bool bSlow = 10;
  void clear_bslow();
  bool bslow() const;
  void set_bslow(bool value);
  private:
  bool _internal_bslow() const;
  void _internal_set_bslow(bool value);
  public:

  // int32 iAttack = 9;
  void clear_iattack();
  ::PROTOBUF_NAMESPACE_ID::int32 iattack() const;
  void set_iattack(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iattack() const;
  void _internal_set_iattack(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_COLLIDERSTATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voffset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChildCollider > tchild_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 icollayer_;
  float fradius_;
  ::PROTOBUF_NAMESPACE_ID::int32 iattacktype_;
  bool bactive_;
  bool bslow_;
  ::PROTOBUF_NAMESPACE_ID::int32 iattack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_COLLISION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_COLLISION) */ {
 public:
  inline S_COLLISION() : S_COLLISION(nullptr) {}
  ~S_COLLISION() override;
  explicit constexpr S_COLLISION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_COLLISION(const S_COLLISION& from);
  S_COLLISION(S_COLLISION&& from) noexcept
    : S_COLLISION() {
    *this = ::std::move(from);
  }

  inline S_COLLISION& operator=(const S_COLLISION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_COLLISION& operator=(S_COLLISION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_COLLISION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_COLLISION* internal_default_instance() {
    return reinterpret_cast<const S_COLLISION*>(
               &_S_COLLISION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_COLLISION& a, S_COLLISION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_COLLISION* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_COLLISION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_COLLISION* New() const final {
    return new S_COLLISION();
  }

  S_COLLISION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_COLLISION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_COLLISION& from);
  void MergeFrom(const S_COLLISION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_COLLISION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_COLLISION";
  }
  protected:
  explicit S_COLLISION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVHitPosFieldNumber = 5,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kIDamageFieldNumber = 4,
    kILayerFieldNumber = 3,
    kIStatusEffectFieldNumber = 6,
    kFForceFieldNumber = 7,
    kFDurationFieldNumber = 8,
  };
  // repeated float vHitPos = 5 [packed = true];
  int vhitpos_size() const;
  private:
  int _internal_vhitpos_size() const;
  public:
  void clear_vhitpos();
  private:
  float _internal_vhitpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vhitpos() const;
  void _internal_add_vhitpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vhitpos();
  public:
  float vhitpos(int index) const;
  void set_vhitpos(int index, float value);
  void add_vhitpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vhitpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vhitpos();

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 iDamage = 4;
  void clear_idamage();
  ::PROTOBUF_NAMESPACE_ID::int64 idamage() const;
  void set_idamage(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_idamage() const;
  void _internal_set_idamage(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iStatusEffect = 6;
  void clear_istatuseffect();
  ::PROTOBUF_NAMESPACE_ID::int32 istatuseffect() const;
  void set_istatuseffect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istatuseffect() const;
  void _internal_set_istatuseffect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float fForce = 7;
  void clear_fforce();
  float fforce() const;
  void set_fforce(float value);
  private:
  float _internal_fforce() const;
  void _internal_set_fforce(float value);
  public:

  // float fDuration = 8;
  void clear_fduration();
  float fduration() const;
  void set_fduration(float value);
  private:
  float _internal_fduration() const;
  void _internal_set_fduration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_COLLISION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vhitpos_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int64 idamage_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 istatuseffect_;
  float fforce_;
  float fduration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_NICKNAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_NICKNAME) */ {
 public:
  inline S_NICKNAME() : S_NICKNAME(nullptr) {}
  ~S_NICKNAME() override;
  explicit constexpr S_NICKNAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_NICKNAME(const S_NICKNAME& from);
  S_NICKNAME(S_NICKNAME&& from) noexcept
    : S_NICKNAME() {
    *this = ::std::move(from);
  }

  inline S_NICKNAME& operator=(const S_NICKNAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_NICKNAME& operator=(S_NICKNAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_NICKNAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_NICKNAME* internal_default_instance() {
    return reinterpret_cast<const S_NICKNAME*>(
               &_S_NICKNAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_NICKNAME& a, S_NICKNAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_NICKNAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_NICKNAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_NICKNAME* New() const final {
    return new S_NICKNAME();
  }

  S_NICKNAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_NICKNAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_NICKNAME& from);
  void MergeFrom(const S_NICKNAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_NICKNAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_NICKNAME";
  }
  protected:
  explicit S_NICKNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNickNameFieldNumber = 1,
  };
  // bytes strNickName = 1;
  void clear_strnickname();
  const std::string& strnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strnickname();
  void set_allocated_strnickname(std::string* strnickname);
  private:
  const std::string& _internal_strnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnickname(const std::string& value);
  std::string* _internal_mutable_strnickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_NICKNAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_USERINFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_USERINFO) */ {
 public:
  inline S_USERINFO() : S_USERINFO(nullptr) {}
  ~S_USERINFO() override;
  explicit constexpr S_USERINFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_USERINFO(const S_USERINFO& from);
  S_USERINFO(S_USERINFO&& from) noexcept
    : S_USERINFO() {
    *this = ::std::move(from);
  }

  inline S_USERINFO& operator=(const S_USERINFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_USERINFO& operator=(S_USERINFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_USERINFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_USERINFO* internal_default_instance() {
    return reinterpret_cast<const S_USERINFO*>(
               &_S_USERINFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_USERINFO& a, S_USERINFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_USERINFO* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_USERINFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_USERINFO* New() const final {
    return new S_USERINFO();
  }

  S_USERINFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_USERINFO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_USERINFO& from);
  void MergeFrom(const S_USERINFO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_USERINFO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_USERINFO";
  }
  protected:
  explicit S_USERINFO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTUserFieldNumber = 1,
  };
  // repeated .Protocol.UserInfo tUser = 1;
  int tuser_size() const;
  private:
  int _internal_tuser_size() const;
  public:
  void clear_tuser();
  ::Protocol::UserInfo* mutable_tuser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
      mutable_tuser();
  private:
  const ::Protocol::UserInfo& _internal_tuser(int index) const;
  ::Protocol::UserInfo* _internal_add_tuser();
  public:
  const ::Protocol::UserInfo& tuser(int index) const;
  ::Protocol::UserInfo* add_tuser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
      tuser() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_USERINFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo > tuser_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_NEARTARGET final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_NEARTARGET) */ {
 public:
  inline S_NEARTARGET() : S_NEARTARGET(nullptr) {}
  ~S_NEARTARGET() override;
  explicit constexpr S_NEARTARGET(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_NEARTARGET(const S_NEARTARGET& from);
  S_NEARTARGET(S_NEARTARGET&& from) noexcept
    : S_NEARTARGET() {
    *this = ::std::move(from);
  }

  inline S_NEARTARGET& operator=(const S_NEARTARGET& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_NEARTARGET& operator=(S_NEARTARGET&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_NEARTARGET& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_NEARTARGET* internal_default_instance() {
    return reinterpret_cast<const S_NEARTARGET*>(
               &_S_NEARTARGET_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_NEARTARGET& a, S_NEARTARGET& b) {
    a.Swap(&b);
  }
  inline void Swap(S_NEARTARGET* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_NEARTARGET* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_NEARTARGET* New() const final {
    return new S_NEARTARGET();
  }

  S_NEARTARGET* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_NEARTARGET>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_NEARTARGET& from);
  void MergeFrom(const S_NEARTARGET& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_NEARTARGET* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_NEARTARGET";
  }
  protected:
  explicit S_NEARTARGET(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kITargetObjectLayerFieldNumber = 4,
    kITargetObjectIDFieldNumber = 5,
  };
  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iTargetObjectLayer = 4;
  void clear_itargetobjectlayer();
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectlayer() const;
  void set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itargetobjectlayer() const;
  void _internal_set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iTargetObjectID = 5;
  void clear_itargetobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectid() const;
  void set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itargetobjectid() const;
  void _internal_set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_NEARTARGET)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectlayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SETSKILL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SETSKILL) */ {
 public:
  inline S_SETSKILL() : S_SETSKILL(nullptr) {}
  ~S_SETSKILL() override;
  explicit constexpr S_SETSKILL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SETSKILL(const S_SETSKILL& from);
  S_SETSKILL(S_SETSKILL&& from) noexcept
    : S_SETSKILL() {
    *this = ::std::move(from);
  }

  inline S_SETSKILL& operator=(const S_SETSKILL& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SETSKILL& operator=(S_SETSKILL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SETSKILL& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SETSKILL* internal_default_instance() {
    return reinterpret_cast<const S_SETSKILL*>(
               &_S_SETSKILL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_SETSKILL& a, S_SETSKILL& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SETSKILL* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SETSKILL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SETSKILL* New() const final {
    return new S_SETSKILL();
  }

  S_SETSKILL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SETSKILL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SETSKILL& from);
  void MergeFrom(const S_SETSKILL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SETSKILL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SETSKILL";
  }
  protected:
  explicit S_SETSKILL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzSkillNameFieldNumber = 4,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kISkillObjectIDFieldNumber = 5,
  };
  // string szSkillName = 4;
  void clear_szskillname();
  const std::string& szskillname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szskillname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szskillname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_szskillname();
  void set_allocated_szskillname(std::string* szskillname);
  private:
  const std::string& _internal_szskillname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szskillname(const std::string& value);
  std::string* _internal_mutable_szskillname();
  public:

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iSkillObjectID = 5;
  void clear_iskillobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iskillobjectid() const;
  void set_iskillobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iskillobjectid() const;
  void _internal_set_iskillobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SETSKILL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szskillname_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 iskillobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SLOWMOTION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SLOWMOTION) */ {
 public:
  inline S_SLOWMOTION() : S_SLOWMOTION(nullptr) {}
  ~S_SLOWMOTION() override;
  explicit constexpr S_SLOWMOTION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SLOWMOTION(const S_SLOWMOTION& from);
  S_SLOWMOTION(S_SLOWMOTION&& from) noexcept
    : S_SLOWMOTION() {
    *this = ::std::move(from);
  }

  inline S_SLOWMOTION& operator=(const S_SLOWMOTION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SLOWMOTION& operator=(S_SLOWMOTION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SLOWMOTION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SLOWMOTION* internal_default_instance() {
    return reinterpret_cast<const S_SLOWMOTION*>(
               &_S_SLOWMOTION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_SLOWMOTION& a, S_SLOWMOTION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SLOWMOTION* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SLOWMOTION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SLOWMOTION* New() const final {
    return new S_SLOWMOTION();
  }

  S_SLOWMOTION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SLOWMOTION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SLOWMOTION& from);
  void MergeFrom(const S_SLOWMOTION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SLOWMOTION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SLOWMOTION";
  }
  protected:
  explicit S_SLOWMOTION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kBSlowFieldNumber = 4,
  };
  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bSlow = 4;
  void clear_bslow();
  bool bslow() const;
  void set_bslow(bool value);
  private:
  bool _internal_bslow() const;
  void _internal_set_bslow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SLOWMOTION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  bool bslow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CAMSHAKE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CAMSHAKE) */ {
 public:
  inline S_CAMSHAKE() : S_CAMSHAKE(nullptr) {}
  ~S_CAMSHAKE() override;
  explicit constexpr S_CAMSHAKE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CAMSHAKE(const S_CAMSHAKE& from);
  S_CAMSHAKE(S_CAMSHAKE&& from) noexcept
    : S_CAMSHAKE() {
    *this = ::std::move(from);
  }

  inline S_CAMSHAKE& operator=(const S_CAMSHAKE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CAMSHAKE& operator=(S_CAMSHAKE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CAMSHAKE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CAMSHAKE* internal_default_instance() {
    return reinterpret_cast<const S_CAMSHAKE*>(
               &_S_CAMSHAKE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_CAMSHAKE& a, S_CAMSHAKE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CAMSHAKE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CAMSHAKE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CAMSHAKE* New() const final {
    return new S_CAMSHAKE();
  }

  S_CAMSHAKE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CAMSHAKE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CAMSHAKE& from);
  void MergeFrom(const S_CAMSHAKE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CAMSHAKE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CAMSHAKE";
  }
  protected:
  explicit S_CAMSHAKE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFCamShakeFieldNumber = 1,
    kFShakeTimeFieldNumber = 2,
  };
  // float fCamShake = 1;
  void clear_fcamshake();
  float fcamshake() const;
  void set_fcamshake(float value);
  private:
  float _internal_fcamshake() const;
  void _internal_set_fcamshake(float value);
  public:

  // float fShakeTime = 2;
  void clear_fshaketime();
  float fshaketime() const;
  void set_fshaketime(float value);
  private:
  float _internal_fshaketime() const;
  void _internal_set_fshaketime(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CAMSHAKE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fcamshake_;
  float fshaketime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_EVENT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EVENT) */ {
 public:
  inline S_EVENT() : S_EVENT(nullptr) {}
  ~S_EVENT() override;
  explicit constexpr S_EVENT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EVENT(const S_EVENT& from);
  S_EVENT(S_EVENT&& from) noexcept
    : S_EVENT() {
    *this = ::std::move(from);
  }

  inline S_EVENT& operator=(const S_EVENT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EVENT& operator=(S_EVENT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EVENT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EVENT* internal_default_instance() {
    return reinterpret_cast<const S_EVENT*>(
               &_S_EVENT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S_EVENT& a, S_EVENT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EVENT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EVENT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_EVENT* New() const final {
    return new S_EVENT();
  }

  S_EVENT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_EVENT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_EVENT& from);
  void MergeFrom(const S_EVENT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EVENT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EVENT";
  }
  protected:
  explicit S_EVENT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIEventIDFieldNumber = 1,
    kIStateFieldNumber = 2,
  };
  // int32 iEventID = 1;
  void clear_ieventid();
  ::PROTOBUF_NAMESPACE_ID::int32 ieventid() const;
  void set_ieventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ieventid() const;
  void _internal_set_ieventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iState = 2;
  void clear_istate();
  ::PROTOBUF_NAMESPACE_ID::int32 istate() const;
  void set_istate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istate() const;
  void _internal_set_istate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_EVENT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ieventid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SKILLEXPLOSION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SKILLEXPLOSION) */ {
 public:
  inline S_SKILLEXPLOSION() : S_SKILLEXPLOSION(nullptr) {}
  ~S_SKILLEXPLOSION() override;
  explicit constexpr S_SKILLEXPLOSION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SKILLEXPLOSION(const S_SKILLEXPLOSION& from);
  S_SKILLEXPLOSION(S_SKILLEXPLOSION&& from) noexcept
    : S_SKILLEXPLOSION() {
    *this = ::std::move(from);
  }

  inline S_SKILLEXPLOSION& operator=(const S_SKILLEXPLOSION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SKILLEXPLOSION& operator=(S_SKILLEXPLOSION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SKILLEXPLOSION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SKILLEXPLOSION* internal_default_instance() {
    return reinterpret_cast<const S_SKILLEXPLOSION*>(
               &_S_SKILLEXPLOSION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_SKILLEXPLOSION& a, S_SKILLEXPLOSION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SKILLEXPLOSION* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SKILLEXPLOSION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SKILLEXPLOSION* New() const final {
    return new S_SKILLEXPLOSION();
  }

  S_SKILLEXPLOSION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SKILLEXPLOSION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SKILLEXPLOSION& from);
  void MergeFrom(const S_SKILLEXPLOSION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SKILLEXPLOSION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SKILLEXPLOSION";
  }
  protected:
  explicit S_SKILLEXPLOSION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTObjectFieldNumber = 1,
  };
  // .Protocol.ObjectInfo tObject = 1;
  bool has_tobject() const;
  private:
  bool _internal_has_tobject() const;
  public:
  void clear_tobject();
  const ::Protocol::ObjectInfo& tobject() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::ObjectInfo* release_tobject();
  ::Protocol::ObjectInfo* mutable_tobject();
  void set_allocated_tobject(::Protocol::ObjectInfo* tobject);
  private:
  const ::Protocol::ObjectInfo& _internal_tobject() const;
  ::Protocol::ObjectInfo* _internal_mutable_tobject();
  public:
  void unsafe_arena_set_allocated_tobject(
      ::Protocol::ObjectInfo* tobject);
  ::Protocol::ObjectInfo* unsafe_arena_release_tobject();

  // @@protoc_insertion_point(class_scope:Protocol.S_SKILLEXPLOSION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::ObjectInfo* tobject_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_HP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_HP) */ {
 public:
  inline S_HP() : S_HP(nullptr) {}
  ~S_HP() override;
  explicit constexpr S_HP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_HP(const S_HP& from);
  S_HP(S_HP&& from) noexcept
    : S_HP() {
    *this = ::std::move(from);
  }

  inline S_HP& operator=(const S_HP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_HP& operator=(S_HP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_HP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_HP* internal_default_instance() {
    return reinterpret_cast<const S_HP*>(
               &_S_HP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_HP& a, S_HP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_HP* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_HP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_HP* New() const final {
    return new S_HP();
  }

  S_HP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_HP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_HP& from);
  void MergeFrom(const S_HP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_HP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_HP";
  }
  protected:
  explicit S_HP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kIHPFieldNumber = 4,
  };
  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iHP = 4;
  void clear_ihp();
  ::PROTOBUF_NAMESPACE_ID::int32 ihp() const;
  void set_ihp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ihp() const;
  void _internal_set_ihp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_HP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 ihp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_PLAYER) */ {
 public:
  inline S_CREATE_PLAYER() : S_CREATE_PLAYER(nullptr) {}
  ~S_CREATE_PLAYER() override;
  explicit constexpr S_CREATE_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_PLAYER(const S_CREATE_PLAYER& from);
  S_CREATE_PLAYER(S_CREATE_PLAYER&& from) noexcept
    : S_CREATE_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_CREATE_PLAYER& operator=(const S_CREATE_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_PLAYER& operator=(S_CREATE_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_PLAYER*>(
               &_S_CREATE_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_CREATE_PLAYER& a, S_CREATE_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_PLAYER* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE_PLAYER* New() const final {
    return new S_CREATE_PLAYER();
  }

  S_CREATE_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE_PLAYER>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE_PLAYER& from);
  void MergeFrom(const S_CREATE_PLAYER& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_PLAYER* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_PLAYER";
  }
  protected:
  explicit S_CREATE_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatWorldFieldNumber = 5,
    kVTargetPosFieldNumber = 7,
    kStrNickNameFieldNumber = 6,
    kStrStateFieldNumber = 8,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kIClassFieldNumber = 3,
    kBControllFieldNumber = 4,
    kIWeaponIndexFieldNumber = 9,
  };
  // repeated float matWorld = 5 [packed = true];
  int matworld_size() const;
  private:
  int _internal_matworld_size() const;
  public:
  void clear_matworld();
  private:
  float _internal_matworld(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_matworld() const;
  void _internal_add_matworld(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_matworld();
  public:
  float matworld(int index) const;
  void set_matworld(int index, float value);
  void add_matworld(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      matworld() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_matworld();

  // repeated float vTargetPos = 7 [packed = true];
  int vtargetpos_size() const;
  private:
  int _internal_vtargetpos_size() const;
  public:
  void clear_vtargetpos();
  private:
  float _internal_vtargetpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vtargetpos() const;
  void _internal_add_vtargetpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vtargetpos();
  public:
  float vtargetpos(int index) const;
  void set_vtargetpos(int index, float value);
  void add_vtargetpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vtargetpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vtargetpos();

  // bytes strNickName = 6;
  void clear_strnickname();
  const std::string& strnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strnickname();
  void set_allocated_strnickname(std::string* strnickname);
  private:
  const std::string& _internal_strnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnickname(const std::string& value);
  std::string* _internal_mutable_strnickname();
  public:

  // string strState = 8;
  void clear_strstate();
  const std::string& strstate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strstate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strstate();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strstate();
  void set_allocated_strstate(std::string* strstate);
  private:
  const std::string& _internal_strstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstate(const std::string& value);
  std::string* _internal_mutable_strstate();
  public:

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iClass = 3;
  void clear_iclass();
  ::PROTOBUF_NAMESPACE_ID::int32 iclass() const;
  void set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iclass() const;
  void _internal_set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bControll = 4;
  void clear_bcontroll();
  bool bcontroll() const;
  void set_bcontroll(bool value);
  private:
  bool _internal_bcontroll() const;
  void _internal_set_bcontroll(bool value);
  public:

  // int32 iWeaponIndex = 9;
  void clear_iweaponindex();
  ::PROTOBUF_NAMESPACE_ID::int32 iweaponindex() const;
  void set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iweaponindex() const;
  void _internal_set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > matworld_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vtargetpos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 iclass_;
  bool bcontroll_;
  ::PROTOBUF_NAMESPACE_ID::int32 iweaponindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit constexpr S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHAT* New() const final {
    return new S_CHAT();
  }

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHAT& from);
  void MergeFrom(const S_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSzChatFieldNumber = 1,
  };
  // bytes szChat = 1;
  void clear_szchat();
  const std::string& szchat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_szchat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_szchat();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_szchat();
  void set_allocated_szchat(std::string* szchat);
  private:
  const std::string& _internal_szchat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szchat(const std::string& value);
  std::string* _internal_mutable_szchat();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr szchat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MONSTERSTATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MONSTERSTATE) */ {
 public:
  inline S_MONSTERSTATE() : S_MONSTERSTATE(nullptr) {}
  ~S_MONSTERSTATE() override;
  explicit constexpr S_MONSTERSTATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MONSTERSTATE(const S_MONSTERSTATE& from);
  S_MONSTERSTATE(S_MONSTERSTATE&& from) noexcept
    : S_MONSTERSTATE() {
    *this = ::std::move(from);
  }

  inline S_MONSTERSTATE& operator=(const S_MONSTERSTATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MONSTERSTATE& operator=(S_MONSTERSTATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MONSTERSTATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MONSTERSTATE* internal_default_instance() {
    return reinterpret_cast<const S_MONSTERSTATE*>(
               &_S_MONSTERSTATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_MONSTERSTATE& a, S_MONSTERSTATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MONSTERSTATE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MONSTERSTATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_MONSTERSTATE* New() const final {
    return new S_MONSTERSTATE();
  }

  S_MONSTERSTATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_MONSTERSTATE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_MONSTERSTATE& from);
  void MergeFrom(const S_MONSTERSTATE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MONSTERSTATE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MONSTERSTATE";
  }
  protected:
  explicit S_MONSTERSTATE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVTargetPosFieldNumber = 6,
    kStrStateFieldNumber = 3,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kITargetObjectLayerFieldNumber = 4,
    kITargetObjectIDFieldNumber = 5,
  };
  // repeated float vTargetPos = 6 [packed = true];
  int vtargetpos_size() const;
  private:
  int _internal_vtargetpos_size() const;
  public:
  void clear_vtargetpos();
  private:
  float _internal_vtargetpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vtargetpos() const;
  void _internal_add_vtargetpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vtargetpos();
  public:
  float vtargetpos(int index) const;
  void set_vtargetpos(int index, float value);
  void add_vtargetpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vtargetpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vtargetpos();

  // string strState = 3;
  void clear_strstate();
  const std::string& strstate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strstate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strstate();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strstate();
  void set_allocated_strstate(std::string* strstate);
  private:
  const std::string& _internal_strstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstate(const std::string& value);
  std::string* _internal_mutable_strstate();
  public:

  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iTargetObjectLayer = 4;
  void clear_itargetobjectlayer();
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectlayer() const;
  void set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itargetobjectlayer() const;
  void _internal_set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iTargetObjectID = 5;
  void clear_itargetobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectid() const;
  void set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_itargetobjectid() const;
  void _internal_set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MONSTERSTATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vtargetpos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstate_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectlayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 itargetobjectid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PLAYERLEVELMOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PLAYERLEVELMOVE) */ {
 public:
  inline S_PLAYERLEVELMOVE() : S_PLAYERLEVELMOVE(nullptr) {}
  ~S_PLAYERLEVELMOVE() override;
  explicit constexpr S_PLAYERLEVELMOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PLAYERLEVELMOVE(const S_PLAYERLEVELMOVE& from);
  S_PLAYERLEVELMOVE(S_PLAYERLEVELMOVE&& from) noexcept
    : S_PLAYERLEVELMOVE() {
    *this = ::std::move(from);
  }

  inline S_PLAYERLEVELMOVE& operator=(const S_PLAYERLEVELMOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PLAYERLEVELMOVE& operator=(S_PLAYERLEVELMOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PLAYERLEVELMOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PLAYERLEVELMOVE* internal_default_instance() {
    return reinterpret_cast<const S_PLAYERLEVELMOVE*>(
               &_S_PLAYERLEVELMOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S_PLAYERLEVELMOVE& a, S_PLAYERLEVELMOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PLAYERLEVELMOVE* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PLAYERLEVELMOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_PLAYERLEVELMOVE* New() const final {
    return new S_PLAYERLEVELMOVE();
  }

  S_PLAYERLEVELMOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_PLAYERLEVELMOVE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_PLAYERLEVELMOVE& from);
  void MergeFrom(const S_PLAYERLEVELMOVE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PLAYERLEVELMOVE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PLAYERLEVELMOVE";
  }
  protected:
  explicit S_PLAYERLEVELMOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kICurrLevelFieldNumber = 1,
    kINextLevelFieldNumber = 2,
  };
  // int32 iCurrLevel = 1;
  void clear_icurrlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 icurrlevel() const;
  void set_icurrlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icurrlevel() const;
  void _internal_set_icurrlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iNextLevel = 2;
  void clear_inextlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 inextlevel() const;
  void set_inextlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inextlevel() const;
  void _internal_set_inextlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PLAYERLEVELMOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 icurrlevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 inextlevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DELETEGAMEOBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DELETEGAMEOBJECT) */ {
 public:
  inline S_DELETEGAMEOBJECT() : S_DELETEGAMEOBJECT(nullptr) {}
  ~S_DELETEGAMEOBJECT() override;
  explicit constexpr S_DELETEGAMEOBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DELETEGAMEOBJECT(const S_DELETEGAMEOBJECT& from);
  S_DELETEGAMEOBJECT(S_DELETEGAMEOBJECT&& from) noexcept
    : S_DELETEGAMEOBJECT() {
    *this = ::std::move(from);
  }

  inline S_DELETEGAMEOBJECT& operator=(const S_DELETEGAMEOBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DELETEGAMEOBJECT& operator=(S_DELETEGAMEOBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DELETEGAMEOBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DELETEGAMEOBJECT* internal_default_instance() {
    return reinterpret_cast<const S_DELETEGAMEOBJECT*>(
               &_S_DELETEGAMEOBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S_DELETEGAMEOBJECT& a, S_DELETEGAMEOBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DELETEGAMEOBJECT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DELETEGAMEOBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_DELETEGAMEOBJECT* New() const final {
    return new S_DELETEGAMEOBJECT();
  }

  S_DELETEGAMEOBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_DELETEGAMEOBJECT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_DELETEGAMEOBJECT& from);
  void MergeFrom(const S_DELETEGAMEOBJECT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DELETEGAMEOBJECT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DELETEGAMEOBJECT";
  }
  protected:
  explicit S_DELETEGAMEOBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
  };
  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DELETEGAMEOBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_IDENTITY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_IDENTITY) */ {
 public:
  inline S_IDENTITY() : S_IDENTITY(nullptr) {}
  ~S_IDENTITY() override;
  explicit constexpr S_IDENTITY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_IDENTITY(const S_IDENTITY& from);
  S_IDENTITY(S_IDENTITY&& from) noexcept
    : S_IDENTITY() {
    *this = ::std::move(from);
  }

  inline S_IDENTITY& operator=(const S_IDENTITY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_IDENTITY& operator=(S_IDENTITY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_IDENTITY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_IDENTITY* internal_default_instance() {
    return reinterpret_cast<const S_IDENTITY*>(
               &_S_IDENTITY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(S_IDENTITY& a, S_IDENTITY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_IDENTITY* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_IDENTITY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_IDENTITY* New() const final {
    return new S_IDENTITY();
  }

  S_IDENTITY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_IDENTITY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_IDENTITY& from);
  void MergeFrom(const S_IDENTITY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_IDENTITY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_IDENTITY";
  }
  protected:
  explicit S_IDENTITY(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
    kIWeaponIndexFieldNumber = 4,
  };
  // int32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iWeaponIndex = 4;
  void clear_iweaponindex();
  ::PROTOBUF_NAMESPACE_ID::int32 iweaponindex() const;
  void set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iweaponindex() const;
  void _internal_set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_IDENTITY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  ::PROTOBUF_NAMESPACE_ID::int32 iweaponindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_TIME

// uint64 iSendTick = 1;
inline void S_TIME::clear_isendtick() {
  isendtick_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_TIME::_internal_isendtick() const {
  return isendtick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_TIME::isendtick() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TIME.iSendTick)
  return _internal_isendtick();
}
inline void S_TIME::_internal_set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  isendtick_ = value;
}
inline void S_TIME::set_isendtick(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_isendtick(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TIME.iSendTick)
}

// uint32 iServerMinute = 2;
inline void S_TIME::clear_iserverminute() {
  iserverminute_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_TIME::_internal_iserverminute() const {
  return iserverminute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_TIME::iserverminute() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TIME.iServerMinute)
  return _internal_iserverminute();
}
inline void S_TIME::_internal_set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iserverminute_ = value;
}
inline void S_TIME::set_iserverminute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iserverminute(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TIME.iServerMinute)
}

// float fServerSecond = 3;
inline void S_TIME::clear_fserversecond() {
  fserversecond_ = 0;
}
inline float S_TIME::_internal_fserversecond() const {
  return fserversecond_;
}
inline float S_TIME::fserversecond() const {
  // @@protoc_insertion_point(field_get:Protocol.S_TIME.fServerSecond)
  return _internal_fserversecond();
}
inline void S_TIME::_internal_set_fserversecond(float value) {
  
  fserversecond_ = value;
}
inline void S_TIME::set_fserversecond(float value) {
  _internal_set_fserversecond(value);
  // @@protoc_insertion_point(field_set:Protocol.S_TIME.fServerSecond)
}

// -------------------------------------------------------------------

// S_LOGIN

// bytes strNickName = 1;
inline void S_LOGIN::clear_strnickname() {
  strnickname_.ClearToEmpty();
}
inline const std::string& S_LOGIN::strnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.strNickName)
  return _internal_strnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOGIN::set_strnickname(ArgT0&& arg0, ArgT... args) {
 
 strnickname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.strNickName)
}
inline std::string* S_LOGIN::mutable_strnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.strNickName)
  return _internal_mutable_strnickname();
}
inline const std::string& S_LOGIN::_internal_strnickname() const {
  return strnickname_.Get();
}
inline void S_LOGIN::_internal_set_strnickname(const std::string& value) {
  
  strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_LOGIN::_internal_mutable_strnickname() {
  
  return strnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_LOGIN::release_strnickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.strNickName)
  return strnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_LOGIN::set_allocated_strnickname(std::string* strnickname) {
  if (strnickname != nullptr) {
    
  } else {
    
  }
  strnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.strNickName)
}

// int32 iClass = 2;
inline void S_LOGIN::clear_iclass() {
  iclass_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LOGIN::_internal_iclass() const {
  return iclass_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_LOGIN::iclass() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.iClass)
  return _internal_iclass();
}
inline void S_LOGIN::_internal_set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iclass_ = value;
}
inline void S_LOGIN::set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iclass(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.iClass)
}

// -------------------------------------------------------------------

// S_OPEN_LEVEL

// uint64 iLevelID = 1;
inline void S_OPEN_LEVEL::clear_ilevelid() {
  ilevelid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OPEN_LEVEL::_internal_ilevelid() const {
  return ilevelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_OPEN_LEVEL::ilevelid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OPEN_LEVEL.iLevelID)
  return _internal_ilevelid();
}
inline void S_OPEN_LEVEL::_internal_set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ilevelid_ = value;
}
inline void S_OPEN_LEVEL::set_ilevelid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ilevelid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OPEN_LEVEL.iLevelID)
}

// -------------------------------------------------------------------

// S_LEVEL_STATE

// uint32 iLevelState = 1;
inline void S_LEVEL_STATE::clear_ilevelstate() {
  ilevelstate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LEVEL_STATE::_internal_ilevelstate() const {
  return ilevelstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_LEVEL_STATE::ilevelstate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LEVEL_STATE.iLevelState)
  return _internal_ilevelstate();
}
inline void S_LEVEL_STATE::_internal_set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilevelstate_ = value;
}
inline void S_LEVEL_STATE::set_ilevelstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilevelstate(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LEVEL_STATE.iLevelState)
}

// -------------------------------------------------------------------

// S_CREATE_OBJCECT

// int32 iObjectID = 1;
inline void S_CREATE_OBJCECT::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_OBJCECT::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_OBJCECT::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iObjectID)
  return _internal_iobjectid();
}
inline void S_CREATE_OBJCECT::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_CREATE_OBJCECT::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iObjectID)
}

// uint32 iObjectType = 2;
inline void S_CREATE_OBJCECT::clear_iobjecttype() {
  iobjecttype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::_internal_iobjecttype() const {
  return iobjecttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::iobjecttype() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iObjectType)
  return _internal_iobjecttype();
}
inline void S_CREATE_OBJCECT::_internal_set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iobjecttype_ = value;
}
inline void S_CREATE_OBJCECT::set_iobjecttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iobjecttype(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iObjectType)
}

// uint32 iLevel = 3;
inline void S_CREATE_OBJCECT::clear_ilevel() {
  ilevel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iLevel)
  return _internal_ilevel();
}
inline void S_CREATE_OBJCECT::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilevel_ = value;
}
inline void S_CREATE_OBJCECT::set_ilevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iLevel)
}

// uint32 iLayer = 4;
inline void S_CREATE_OBJCECT::clear_ilayer() {
  ilayer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 S_CREATE_OBJCECT::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.iLayer)
  return _internal_ilayer();
}
inline void S_CREATE_OBJCECT::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ilayer_ = value;
}
inline void S_CREATE_OBJCECT::set_ilayer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.iLayer)
}

// string strName = 5;
inline void S_CREATE_OBJCECT::clear_strname() {
  strname_.ClearToEmpty();
}
inline const std::string& S_CREATE_OBJCECT::strname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.strName)
  return _internal_strname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE_OBJCECT::set_strname(ArgT0&& arg0, ArgT... args) {
 
 strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.strName)
}
inline std::string* S_CREATE_OBJCECT::mutable_strname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_OBJCECT.strName)
  return _internal_mutable_strname();
}
inline const std::string& S_CREATE_OBJCECT::_internal_strname() const {
  return strname_.Get();
}
inline void S_CREATE_OBJCECT::_internal_set_strname(const std::string& value) {
  
  strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CREATE_OBJCECT::_internal_mutable_strname() {
  
  return strname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CREATE_OBJCECT::release_strname() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_OBJCECT.strName)
  return strname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CREATE_OBJCECT::set_allocated_strname(std::string* strname) {
  if (strname != nullptr) {
    
  } else {
    
  }
  strname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_OBJCECT.strName)
}

// bool bControll = 6;
inline void S_CREATE_OBJCECT::clear_bcontroll() {
  bcontroll_ = false;
}
inline bool S_CREATE_OBJCECT::_internal_bcontroll() const {
  return bcontroll_;
}
inline bool S_CREATE_OBJCECT::bcontroll() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.bControll)
  return _internal_bcontroll();
}
inline void S_CREATE_OBJCECT::_internal_set_bcontroll(bool value) {
  
  bcontroll_ = value;
}
inline void S_CREATE_OBJCECT::set_bcontroll(bool value) {
  _internal_set_bcontroll(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.bControll)
}

// repeated float vPos = 7 [packed = true];
inline int S_CREATE_OBJCECT::_internal_vpos_size() const {
  return vpos_.size();
}
inline int S_CREATE_OBJCECT::vpos_size() const {
  return _internal_vpos_size();
}
inline void S_CREATE_OBJCECT::clear_vpos() {
  vpos_.Clear();
}
inline float S_CREATE_OBJCECT::_internal_vpos(int index) const {
  return vpos_.Get(index);
}
inline float S_CREATE_OBJCECT::vpos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.vPos)
  return _internal_vpos(index);
}
inline void S_CREATE_OBJCECT::set_vpos(int index, float value) {
  vpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_OBJCECT.vPos)
}
inline void S_CREATE_OBJCECT::_internal_add_vpos(float value) {
  vpos_.Add(value);
}
inline void S_CREATE_OBJCECT::add_vpos(float value) {
  _internal_add_vpos(value);
  // @@protoc_insertion_point(field_add:Protocol.S_CREATE_OBJCECT.vPos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_CREATE_OBJCECT::_internal_vpos() const {
  return vpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_CREATE_OBJCECT::vpos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CREATE_OBJCECT.vPos)
  return _internal_vpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_CREATE_OBJCECT::_internal_mutable_vpos() {
  return &vpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_CREATE_OBJCECT::mutable_vpos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CREATE_OBJCECT.vPos)
  return _internal_mutable_vpos();
}

// repeated .Protocol.MonsterCreateInfo tMonsterInfo = 8;
inline int S_CREATE_OBJCECT::_internal_tmonsterinfo_size() const {
  return tmonsterinfo_.size();
}
inline int S_CREATE_OBJCECT::tmonsterinfo_size() const {
  return _internal_tmonsterinfo_size();
}
inline ::Protocol::MonsterCreateInfo* S_CREATE_OBJCECT::mutable_tmonsterinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_OBJCECT.tMonsterInfo)
  return tmonsterinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterCreateInfo >*
S_CREATE_OBJCECT::mutable_tmonsterinfo() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CREATE_OBJCECT.tMonsterInfo)
  return &tmonsterinfo_;
}
inline const ::Protocol::MonsterCreateInfo& S_CREATE_OBJCECT::_internal_tmonsterinfo(int index) const {
  return tmonsterinfo_.Get(index);
}
inline const ::Protocol::MonsterCreateInfo& S_CREATE_OBJCECT::tmonsterinfo(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_OBJCECT.tMonsterInfo)
  return _internal_tmonsterinfo(index);
}
inline ::Protocol::MonsterCreateInfo* S_CREATE_OBJCECT::_internal_add_tmonsterinfo() {
  return tmonsterinfo_.Add();
}
inline ::Protocol::MonsterCreateInfo* S_CREATE_OBJCECT::add_tmonsterinfo() {
  // @@protoc_insertion_point(field_add:Protocol.S_CREATE_OBJCECT.tMonsterInfo)
  return _internal_add_tmonsterinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::MonsterCreateInfo >&
S_CREATE_OBJCECT::tmonsterinfo() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CREATE_OBJCECT.tMonsterInfo)
  return tmonsterinfo_;
}

// -------------------------------------------------------------------

// S_CHARACTER_NAME

// string strName = 1;
inline void S_CHARACTER_NAME::clear_strname() {
  strname_.ClearToEmpty();
}
inline const std::string& S_CHARACTER_NAME::strname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHARACTER_NAME.strName)
  return _internal_strname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHARACTER_NAME::set_strname(ArgT0&& arg0, ArgT... args) {
 
 strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHARACTER_NAME.strName)
}
inline std::string* S_CHARACTER_NAME::mutable_strname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHARACTER_NAME.strName)
  return _internal_mutable_strname();
}
inline const std::string& S_CHARACTER_NAME::_internal_strname() const {
  return strname_.Get();
}
inline void S_CHARACTER_NAME::_internal_set_strname(const std::string& value) {
  
  strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHARACTER_NAME::_internal_mutable_strname() {
  
  return strname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHARACTER_NAME::release_strname() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHARACTER_NAME.strName)
  return strname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHARACTER_NAME::set_allocated_strname(std::string* strname) {
  if (strname != nullptr) {
    
  } else {
    
  }
  strname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHARACTER_NAME.strName)
}

// -------------------------------------------------------------------

// S_MATRIX

// int32 iObjectID = 1;
inline void S_MATRIX::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.iObjectID)
  return _internal_iobjectid();
}
inline void S_MATRIX::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_MATRIX::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.iObjectID)
}

// int32 iLevel = 2;
inline void S_MATRIX::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.iLevel)
  return _internal_ilevel();
}
inline void S_MATRIX::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_MATRIX::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.iLevel)
}

// int32 iLayer = 3;
inline void S_MATRIX::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MATRIX::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.iLayer)
  return _internal_ilayer();
}
inline void S_MATRIX::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_MATRIX::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.iLayer)
}

// repeated float Matrix = 4 [packed = true];
inline int S_MATRIX::_internal_matrix_size() const {
  return matrix_.size();
}
inline int S_MATRIX::matrix_size() const {
  return _internal_matrix_size();
}
inline void S_MATRIX::clear_matrix() {
  matrix_.Clear();
}
inline float S_MATRIX::_internal_matrix(int index) const {
  return matrix_.Get(index);
}
inline float S_MATRIX::matrix(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MATRIX.Matrix)
  return _internal_matrix(index);
}
inline void S_MATRIX::set_matrix(int index, float value) {
  matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_MATRIX.Matrix)
}
inline void S_MATRIX::_internal_add_matrix(float value) {
  matrix_.Add(value);
}
inline void S_MATRIX::add_matrix(float value) {
  _internal_add_matrix(value);
  // @@protoc_insertion_point(field_add:Protocol.S_MATRIX.Matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_MATRIX::_internal_matrix() const {
  return matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_MATRIX::matrix() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MATRIX.Matrix)
  return _internal_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_MATRIX::_internal_mutable_matrix() {
  return &matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_MATRIX::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MATRIX.Matrix)
  return _internal_mutable_matrix();
}

// -------------------------------------------------------------------

// S_ANIMATION

// int32 iObjectID = 1;
inline void S_ANIMATION::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iObjectID)
  return _internal_iobjectid();
}
inline void S_ANIMATION::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_ANIMATION::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iObjectID)
}

// int32 iLevel = 2;
inline void S_ANIMATION::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iLevel)
  return _internal_ilevel();
}
inline void S_ANIMATION::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_ANIMATION::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iLevel)
}

// int32 iLayer = 3;
inline void S_ANIMATION::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iLayer)
  return _internal_ilayer();
}
inline void S_ANIMATION::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_ANIMATION::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iLayer)
}

// int32 iAnimIndex = 4;
inline void S_ANIMATION::clear_ianimindex() {
  ianimindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ianimindex() const {
  return ianimindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ianimindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iAnimIndex)
  return _internal_ianimindex();
}
inline void S_ANIMATION::_internal_set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ianimindex_ = value;
}
inline void S_ANIMATION::set_ianimindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ianimindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iAnimIndex)
}

// float fChangeTime = 5;
inline void S_ANIMATION::clear_fchangetime() {
  fchangetime_ = 0;
}
inline float S_ANIMATION::_internal_fchangetime() const {
  return fchangetime_;
}
inline float S_ANIMATION::fchangetime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.fChangeTime)
  return _internal_fchangetime();
}
inline void S_ANIMATION::_internal_set_fchangetime(float value) {
  
  fchangetime_ = value;
}
inline void S_ANIMATION::set_fchangetime(float value) {
  _internal_set_fchangetime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.fChangeTime)
}

// int32 iStartFrame = 6;
inline void S_ANIMATION::clear_istartframe() {
  istartframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_istartframe() const {
  return istartframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::istartframe() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iStartFrame)
  return _internal_istartframe();
}
inline void S_ANIMATION::_internal_set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istartframe_ = value;
}
inline void S_ANIMATION::set_istartframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istartframe(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iStartFrame)
}

// int32 iChangeFrame = 7;
inline void S_ANIMATION::clear_ichangeframe() {
  ichangeframe_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::_internal_ichangeframe() const {
  return ichangeframe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_ANIMATION::ichangeframe() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.iChangeFrame)
  return _internal_ichangeframe();
}
inline void S_ANIMATION::_internal_set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ichangeframe_ = value;
}
inline void S_ANIMATION::set_ichangeframe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ichangeframe(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.iChangeFrame)
}

// -------------------------------------------------------------------

// S_OBJECTINFO

// repeated .Protocol.ObjectInfo tObject = 1;
inline int S_OBJECTINFO::_internal_tobject_size() const {
  return tobject_.size();
}
inline int S_OBJECTINFO::tobject_size() const {
  return _internal_tobject_size();
}
inline ::Protocol::ObjectInfo* S_OBJECTINFO::mutable_tobject(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_OBJECTINFO.tObject)
  return tobject_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_OBJECTINFO::mutable_tobject() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_OBJECTINFO.tObject)
  return &tobject_;
}
inline const ::Protocol::ObjectInfo& S_OBJECTINFO::_internal_tobject(int index) const {
  return tobject_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_OBJECTINFO::tobject(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_OBJECTINFO.tObject)
  return _internal_tobject(index);
}
inline ::Protocol::ObjectInfo* S_OBJECTINFO::_internal_add_tobject() {
  return tobject_.Add();
}
inline ::Protocol::ObjectInfo* S_OBJECTINFO::add_tobject() {
  // @@protoc_insertion_point(field_add:Protocol.S_OBJECTINFO.tObject)
  return _internal_add_tobject();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_OBJECTINFO::tobject() const {
  // @@protoc_insertion_point(field_list:Protocol.S_OBJECTINFO.tObject)
  return tobject_;
}

// -------------------------------------------------------------------

// S_STATE

// .Protocol.ObjectInfo tObject = 1;
inline bool S_STATE::_internal_has_tobject() const {
  return this != internal_default_instance() && tobject_ != nullptr;
}
inline bool S_STATE::has_tobject() const {
  return _internal_has_tobject();
}
inline const ::Protocol::ObjectInfo& S_STATE::_internal_tobject() const {
  const ::Protocol::ObjectInfo* p = tobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_STATE::tobject() const {
  // @@protoc_insertion_point(field_get:Protocol.S_STATE.tObject)
  return _internal_tobject();
}
inline void S_STATE::unsafe_arena_set_allocated_tobject(
    ::Protocol::ObjectInfo* tobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tobject_);
  }
  tobject_ = tobject;
  if (tobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_STATE.tObject)
}
inline ::Protocol::ObjectInfo* S_STATE::release_tobject() {
  
  ::Protocol::ObjectInfo* temp = tobject_;
  tobject_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::ObjectInfo* S_STATE::unsafe_arena_release_tobject() {
  // @@protoc_insertion_point(field_release:Protocol.S_STATE.tObject)
  
  ::Protocol::ObjectInfo* temp = tobject_;
  tobject_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_STATE::_internal_mutable_tobject() {
  
  if (tobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    tobject_ = p;
  }
  return tobject_;
}
inline ::Protocol::ObjectInfo* S_STATE::mutable_tobject() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_STATE.tObject)
  return _internal_mutable_tobject();
}
inline void S_STATE::set_allocated_tobject(::Protocol::ObjectInfo* tobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tobject_);
  }
  if (tobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tobject));
    if (message_arena != submessage_arena) {
      tobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tobject, submessage_arena);
    }
    
  } else {
    
  }
  tobject_ = tobject;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_STATE.tObject)
}

// string strState = 2;
inline void S_STATE::clear_strstate() {
  strstate_.ClearToEmpty();
}
inline const std::string& S_STATE::strstate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_STATE.strState)
  return _internal_strstate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_STATE::set_strstate(ArgT0&& arg0, ArgT... args) {
 
 strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_STATE.strState)
}
inline std::string* S_STATE::mutable_strstate() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_STATE.strState)
  return _internal_mutable_strstate();
}
inline const std::string& S_STATE::_internal_strstate() const {
  return strstate_.Get();
}
inline void S_STATE::_internal_set_strstate(const std::string& value) {
  
  strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_STATE::_internal_mutable_strstate() {
  
  return strstate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_STATE::release_strstate() {
  // @@protoc_insertion_point(field_release:Protocol.S_STATE.strState)
  return strstate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_STATE::set_allocated_strstate(std::string* strstate) {
  if (strstate != nullptr) {
    
  } else {
    
  }
  strstate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strstate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_STATE.strState)
}

// int32 iTargetObjectLayer = 3;
inline void S_STATE::clear_itargetobjectlayer() {
  itargetobjectlayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::_internal_itargetobjectlayer() const {
  return itargetobjectlayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::itargetobjectlayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_STATE.iTargetObjectLayer)
  return _internal_itargetobjectlayer();
}
inline void S_STATE::_internal_set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itargetobjectlayer_ = value;
}
inline void S_STATE::set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itargetobjectlayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_STATE.iTargetObjectLayer)
}

// int32 iTargetObjectID = 4;
inline void S_STATE::clear_itargetobjectid() {
  itargetobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::_internal_itargetobjectid() const {
  return itargetobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::itargetobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_STATE.iTargetObjectID)
  return _internal_itargetobjectid();
}
inline void S_STATE::_internal_set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itargetobjectid_ = value;
}
inline void S_STATE::set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itargetobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_STATE.iTargetObjectID)
}

// int32 iHitObjectLayer = 5;
inline void S_STATE::clear_ihitobjectlayer() {
  ihitobjectlayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::_internal_ihitobjectlayer() const {
  return ihitobjectlayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::ihitobjectlayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_STATE.iHitObjectLayer)
  return _internal_ihitobjectlayer();
}
inline void S_STATE::_internal_set_ihitobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ihitobjectlayer_ = value;
}
inline void S_STATE::set_ihitobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ihitobjectlayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_STATE.iHitObjectLayer)
}

// int32 iHitObjectID = 6;
inline void S_STATE::clear_ihitobjectid() {
  ihitobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::_internal_ihitobjectid() const {
  return ihitobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::ihitobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_STATE.iHitObjectID)
  return _internal_ihitobjectid();
}
inline void S_STATE::_internal_set_ihitobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ihitobjectid_ = value;
}
inline void S_STATE::set_ihitobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ihitobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_STATE.iHitObjectID)
}

// int32 iWeaponIndex = 7;
inline void S_STATE::clear_iweaponindex() {
  iweaponindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::_internal_iweaponindex() const {
  return iweaponindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_STATE::iweaponindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_STATE.iWeaponIndex)
  return _internal_iweaponindex();
}
inline void S_STATE::_internal_set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iweaponindex_ = value;
}
inline void S_STATE::set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iweaponindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_STATE.iWeaponIndex)
}

// -------------------------------------------------------------------

// S_COLLIDERSTATE

// int32 iObjectID = 1;
inline void S_COLLIDERSTATE::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.iObjectID)
  return _internal_iobjectid();
}
inline void S_COLLIDERSTATE::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_COLLIDERSTATE::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.iObjectID)
}

// int32 iLevel = 2;
inline void S_COLLIDERSTATE::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.iLevel)
  return _internal_ilevel();
}
inline void S_COLLIDERSTATE::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_COLLIDERSTATE::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.iLevel)
}

// int32 iLayer = 3;
inline void S_COLLIDERSTATE::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.iLayer)
  return _internal_ilayer();
}
inline void S_COLLIDERSTATE::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_COLLIDERSTATE::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.iLayer)
}

// int32 iColLayer = 4;
inline void S_COLLIDERSTATE::clear_icollayer() {
  icollayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::_internal_icollayer() const {
  return icollayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::icollayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.iColLayer)
  return _internal_icollayer();
}
inline void S_COLLIDERSTATE::_internal_set_icollayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  icollayer_ = value;
}
inline void S_COLLIDERSTATE::set_icollayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_icollayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.iColLayer)
}

// float fRadius = 5;
inline void S_COLLIDERSTATE::clear_fradius() {
  fradius_ = 0;
}
inline float S_COLLIDERSTATE::_internal_fradius() const {
  return fradius_;
}
inline float S_COLLIDERSTATE::fradius() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.fRadius)
  return _internal_fradius();
}
inline void S_COLLIDERSTATE::_internal_set_fradius(float value) {
  
  fradius_ = value;
}
inline void S_COLLIDERSTATE::set_fradius(float value) {
  _internal_set_fradius(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.fRadius)
}

// repeated float vOffset = 6 [packed = true];
inline int S_COLLIDERSTATE::_internal_voffset_size() const {
  return voffset_.size();
}
inline int S_COLLIDERSTATE::voffset_size() const {
  return _internal_voffset_size();
}
inline void S_COLLIDERSTATE::clear_voffset() {
  voffset_.Clear();
}
inline float S_COLLIDERSTATE::_internal_voffset(int index) const {
  return voffset_.Get(index);
}
inline float S_COLLIDERSTATE::voffset(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.vOffset)
  return _internal_voffset(index);
}
inline void S_COLLIDERSTATE::set_voffset(int index, float value) {
  voffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.vOffset)
}
inline void S_COLLIDERSTATE::_internal_add_voffset(float value) {
  voffset_.Add(value);
}
inline void S_COLLIDERSTATE::add_voffset(float value) {
  _internal_add_voffset(value);
  // @@protoc_insertion_point(field_add:Protocol.S_COLLIDERSTATE.vOffset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_COLLIDERSTATE::_internal_voffset() const {
  return voffset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_COLLIDERSTATE::voffset() const {
  // @@protoc_insertion_point(field_list:Protocol.S_COLLIDERSTATE.vOffset)
  return _internal_voffset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_COLLIDERSTATE::_internal_mutable_voffset() {
  return &voffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_COLLIDERSTATE::mutable_voffset() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_COLLIDERSTATE.vOffset)
  return _internal_mutable_voffset();
}

// bool bActive = 7;
inline void S_COLLIDERSTATE::clear_bactive() {
  bactive_ = false;
}
inline bool S_COLLIDERSTATE::_internal_bactive() const {
  return bactive_;
}
inline bool S_COLLIDERSTATE::bactive() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.bActive)
  return _internal_bactive();
}
inline void S_COLLIDERSTATE::_internal_set_bactive(bool value) {
  
  bactive_ = value;
}
inline void S_COLLIDERSTATE::set_bactive(bool value) {
  _internal_set_bactive(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.bActive)
}

// int32 iAttackType = 8;
inline void S_COLLIDERSTATE::clear_iattacktype() {
  iattacktype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::_internal_iattacktype() const {
  return iattacktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::iattacktype() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.iAttackType)
  return _internal_iattacktype();
}
inline void S_COLLIDERSTATE::_internal_set_iattacktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iattacktype_ = value;
}
inline void S_COLLIDERSTATE::set_iattacktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iattacktype(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.iAttackType)
}

// int32 iAttack = 9;
inline void S_COLLIDERSTATE::clear_iattack() {
  iattack_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::_internal_iattack() const {
  return iattack_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLIDERSTATE::iattack() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.iAttack)
  return _internal_iattack();
}
inline void S_COLLIDERSTATE::_internal_set_iattack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iattack_ = value;
}
inline void S_COLLIDERSTATE::set_iattack(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iattack(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.iAttack)
}

// bool bSlow = 10;
inline void S_COLLIDERSTATE::clear_bslow() {
  bslow_ = false;
}
inline bool S_COLLIDERSTATE::_internal_bslow() const {
  return bslow_;
}
inline bool S_COLLIDERSTATE::bslow() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.bSlow)
  return _internal_bslow();
}
inline void S_COLLIDERSTATE::_internal_set_bslow(bool value) {
  
  bslow_ = value;
}
inline void S_COLLIDERSTATE::set_bslow(bool value) {
  _internal_set_bslow(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLIDERSTATE.bSlow)
}

// repeated .Protocol.ChildCollider tChild = 11;
inline int S_COLLIDERSTATE::_internal_tchild_size() const {
  return tchild_.size();
}
inline int S_COLLIDERSTATE::tchild_size() const {
  return _internal_tchild_size();
}
inline ::Protocol::ChildCollider* S_COLLIDERSTATE::mutable_tchild(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_COLLIDERSTATE.tChild)
  return tchild_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChildCollider >*
S_COLLIDERSTATE::mutable_tchild() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_COLLIDERSTATE.tChild)
  return &tchild_;
}
inline const ::Protocol::ChildCollider& S_COLLIDERSTATE::_internal_tchild(int index) const {
  return tchild_.Get(index);
}
inline const ::Protocol::ChildCollider& S_COLLIDERSTATE::tchild(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLIDERSTATE.tChild)
  return _internal_tchild(index);
}
inline ::Protocol::ChildCollider* S_COLLIDERSTATE::_internal_add_tchild() {
  return tchild_.Add();
}
inline ::Protocol::ChildCollider* S_COLLIDERSTATE::add_tchild() {
  // @@protoc_insertion_point(field_add:Protocol.S_COLLIDERSTATE.tChild)
  return _internal_add_tchild();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ChildCollider >&
S_COLLIDERSTATE::tchild() const {
  // @@protoc_insertion_point(field_list:Protocol.S_COLLIDERSTATE.tChild)
  return tchild_;
}

// -------------------------------------------------------------------

// S_COLLISION

// int32 iObjectID = 1;
inline void S_COLLISION::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.iObjectID)
  return _internal_iobjectid();
}
inline void S_COLLISION::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_COLLISION::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.iObjectID)
}

// int32 iLevel = 2;
inline void S_COLLISION::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.iLevel)
  return _internal_ilevel();
}
inline void S_COLLISION::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_COLLISION::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.iLevel)
}

// int32 iLayer = 3;
inline void S_COLLISION::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.iLayer)
  return _internal_ilayer();
}
inline void S_COLLISION::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_COLLISION::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.iLayer)
}

// int64 iDamage = 4;
inline void S_COLLISION::clear_idamage() {
  idamage_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_COLLISION::_internal_idamage() const {
  return idamage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 S_COLLISION::idamage() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.iDamage)
  return _internal_idamage();
}
inline void S_COLLISION::_internal_set_idamage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  idamage_ = value;
}
inline void S_COLLISION::set_idamage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_idamage(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.iDamage)
}

// repeated float vHitPos = 5 [packed = true];
inline int S_COLLISION::_internal_vhitpos_size() const {
  return vhitpos_.size();
}
inline int S_COLLISION::vhitpos_size() const {
  return _internal_vhitpos_size();
}
inline void S_COLLISION::clear_vhitpos() {
  vhitpos_.Clear();
}
inline float S_COLLISION::_internal_vhitpos(int index) const {
  return vhitpos_.Get(index);
}
inline float S_COLLISION::vhitpos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.vHitPos)
  return _internal_vhitpos(index);
}
inline void S_COLLISION::set_vhitpos(int index, float value) {
  vhitpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.vHitPos)
}
inline void S_COLLISION::_internal_add_vhitpos(float value) {
  vhitpos_.Add(value);
}
inline void S_COLLISION::add_vhitpos(float value) {
  _internal_add_vhitpos(value);
  // @@protoc_insertion_point(field_add:Protocol.S_COLLISION.vHitPos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_COLLISION::_internal_vhitpos() const {
  return vhitpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_COLLISION::vhitpos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_COLLISION.vHitPos)
  return _internal_vhitpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_COLLISION::_internal_mutable_vhitpos() {
  return &vhitpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_COLLISION::mutable_vhitpos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_COLLISION.vHitPos)
  return _internal_mutable_vhitpos();
}

// int32 iStatusEffect = 6;
inline void S_COLLISION::clear_istatuseffect() {
  istatuseffect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::_internal_istatuseffect() const {
  return istatuseffect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_COLLISION::istatuseffect() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.iStatusEffect)
  return _internal_istatuseffect();
}
inline void S_COLLISION::_internal_set_istatuseffect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istatuseffect_ = value;
}
inline void S_COLLISION::set_istatuseffect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istatuseffect(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.iStatusEffect)
}

// float fForce = 7;
inline void S_COLLISION::clear_fforce() {
  fforce_ = 0;
}
inline float S_COLLISION::_internal_fforce() const {
  return fforce_;
}
inline float S_COLLISION::fforce() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.fForce)
  return _internal_fforce();
}
inline void S_COLLISION::_internal_set_fforce(float value) {
  
  fforce_ = value;
}
inline void S_COLLISION::set_fforce(float value) {
  _internal_set_fforce(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.fForce)
}

// float fDuration = 8;
inline void S_COLLISION::clear_fduration() {
  fduration_ = 0;
}
inline float S_COLLISION::_internal_fduration() const {
  return fduration_;
}
inline float S_COLLISION::fduration() const {
  // @@protoc_insertion_point(field_get:Protocol.S_COLLISION.fDuration)
  return _internal_fduration();
}
inline void S_COLLISION::_internal_set_fduration(float value) {
  
  fduration_ = value;
}
inline void S_COLLISION::set_fduration(float value) {
  _internal_set_fduration(value);
  // @@protoc_insertion_point(field_set:Protocol.S_COLLISION.fDuration)
}

// -------------------------------------------------------------------

// S_NICKNAME

// bytes strNickName = 1;
inline void S_NICKNAME::clear_strnickname() {
  strnickname_.ClearToEmpty();
}
inline const std::string& S_NICKNAME::strnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_NICKNAME.strNickName)
  return _internal_strnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_NICKNAME::set_strnickname(ArgT0&& arg0, ArgT... args) {
 
 strnickname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_NICKNAME.strNickName)
}
inline std::string* S_NICKNAME::mutable_strnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_NICKNAME.strNickName)
  return _internal_mutable_strnickname();
}
inline const std::string& S_NICKNAME::_internal_strnickname() const {
  return strnickname_.Get();
}
inline void S_NICKNAME::_internal_set_strnickname(const std::string& value) {
  
  strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_NICKNAME::_internal_mutable_strnickname() {
  
  return strnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_NICKNAME::release_strnickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_NICKNAME.strNickName)
  return strnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_NICKNAME::set_allocated_strnickname(std::string* strnickname) {
  if (strnickname != nullptr) {
    
  } else {
    
  }
  strnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_NICKNAME.strNickName)
}

// -------------------------------------------------------------------

// S_USERINFO

// repeated .Protocol.UserInfo tUser = 1;
inline int S_USERINFO::_internal_tuser_size() const {
  return tuser_.size();
}
inline int S_USERINFO::tuser_size() const {
  return _internal_tuser_size();
}
inline ::Protocol::UserInfo* S_USERINFO::mutable_tuser(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_USERINFO.tUser)
  return tuser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
S_USERINFO::mutable_tuser() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_USERINFO.tUser)
  return &tuser_;
}
inline const ::Protocol::UserInfo& S_USERINFO::_internal_tuser(int index) const {
  return tuser_.Get(index);
}
inline const ::Protocol::UserInfo& S_USERINFO::tuser(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_USERINFO.tUser)
  return _internal_tuser(index);
}
inline ::Protocol::UserInfo* S_USERINFO::_internal_add_tuser() {
  return tuser_.Add();
}
inline ::Protocol::UserInfo* S_USERINFO::add_tuser() {
  // @@protoc_insertion_point(field_add:Protocol.S_USERINFO.tUser)
  return _internal_add_tuser();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
S_USERINFO::tuser() const {
  // @@protoc_insertion_point(field_list:Protocol.S_USERINFO.tUser)
  return tuser_;
}

// -------------------------------------------------------------------

// S_NEARTARGET

// int32 iObjectID = 1;
inline void S_NEARTARGET::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_NEARTARGET.iObjectID)
  return _internal_iobjectid();
}
inline void S_NEARTARGET::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_NEARTARGET::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_NEARTARGET.iObjectID)
}

// int32 iLevel = 2;
inline void S_NEARTARGET::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_NEARTARGET.iLevel)
  return _internal_ilevel();
}
inline void S_NEARTARGET::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_NEARTARGET::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_NEARTARGET.iLevel)
}

// int32 iLayer = 3;
inline void S_NEARTARGET::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_NEARTARGET.iLayer)
  return _internal_ilayer();
}
inline void S_NEARTARGET::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_NEARTARGET::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_NEARTARGET.iLayer)
}

// int32 iTargetObjectLayer = 4;
inline void S_NEARTARGET::clear_itargetobjectlayer() {
  itargetobjectlayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::_internal_itargetobjectlayer() const {
  return itargetobjectlayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::itargetobjectlayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_NEARTARGET.iTargetObjectLayer)
  return _internal_itargetobjectlayer();
}
inline void S_NEARTARGET::_internal_set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itargetobjectlayer_ = value;
}
inline void S_NEARTARGET::set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itargetobjectlayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_NEARTARGET.iTargetObjectLayer)
}

// int32 iTargetObjectID = 5;
inline void S_NEARTARGET::clear_itargetobjectid() {
  itargetobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::_internal_itargetobjectid() const {
  return itargetobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_NEARTARGET::itargetobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_NEARTARGET.iTargetObjectID)
  return _internal_itargetobjectid();
}
inline void S_NEARTARGET::_internal_set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itargetobjectid_ = value;
}
inline void S_NEARTARGET::set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itargetobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_NEARTARGET.iTargetObjectID)
}

// -------------------------------------------------------------------

// S_SETSKILL

// int32 iObjectID = 1;
inline void S_SETSKILL::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SETSKILL.iObjectID)
  return _internal_iobjectid();
}
inline void S_SETSKILL::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_SETSKILL::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SETSKILL.iObjectID)
}

// int32 iLevel = 2;
inline void S_SETSKILL::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SETSKILL.iLevel)
  return _internal_ilevel();
}
inline void S_SETSKILL::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_SETSKILL::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SETSKILL.iLevel)
}

// int32 iLayer = 3;
inline void S_SETSKILL::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SETSKILL.iLayer)
  return _internal_ilayer();
}
inline void S_SETSKILL::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_SETSKILL::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SETSKILL.iLayer)
}

// string szSkillName = 4;
inline void S_SETSKILL::clear_szskillname() {
  szskillname_.ClearToEmpty();
}
inline const std::string& S_SETSKILL::szskillname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SETSKILL.szSkillName)
  return _internal_szskillname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SETSKILL::set_szskillname(ArgT0&& arg0, ArgT... args) {
 
 szskillname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SETSKILL.szSkillName)
}
inline std::string* S_SETSKILL::mutable_szskillname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SETSKILL.szSkillName)
  return _internal_mutable_szskillname();
}
inline const std::string& S_SETSKILL::_internal_szskillname() const {
  return szskillname_.Get();
}
inline void S_SETSKILL::_internal_set_szskillname(const std::string& value) {
  
  szskillname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SETSKILL::_internal_mutable_szskillname() {
  
  return szskillname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SETSKILL::release_szskillname() {
  // @@protoc_insertion_point(field_release:Protocol.S_SETSKILL.szSkillName)
  return szskillname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SETSKILL::set_allocated_szskillname(std::string* szskillname) {
  if (szskillname != nullptr) {
    
  } else {
    
  }
  szskillname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szskillname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SETSKILL.szSkillName)
}

// int32 iSkillObjectID = 5;
inline void S_SETSKILL::clear_iskillobjectid() {
  iskillobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::_internal_iskillobjectid() const {
  return iskillobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SETSKILL::iskillobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SETSKILL.iSkillObjectID)
  return _internal_iskillobjectid();
}
inline void S_SETSKILL::_internal_set_iskillobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iskillobjectid_ = value;
}
inline void S_SETSKILL::set_iskillobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iskillobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SETSKILL.iSkillObjectID)
}

// -------------------------------------------------------------------

// S_SLOWMOTION

// int32 iObjectID = 1;
inline void S_SLOWMOTION::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SLOWMOTION::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SLOWMOTION::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SLOWMOTION.iObjectID)
  return _internal_iobjectid();
}
inline void S_SLOWMOTION::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_SLOWMOTION::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SLOWMOTION.iObjectID)
}

// int32 iLevel = 2;
inline void S_SLOWMOTION::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SLOWMOTION::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SLOWMOTION::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SLOWMOTION.iLevel)
  return _internal_ilevel();
}
inline void S_SLOWMOTION::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_SLOWMOTION::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SLOWMOTION.iLevel)
}

// int32 iLayer = 3;
inline void S_SLOWMOTION::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SLOWMOTION::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_SLOWMOTION::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SLOWMOTION.iLayer)
  return _internal_ilayer();
}
inline void S_SLOWMOTION::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_SLOWMOTION::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SLOWMOTION.iLayer)
}

// bool bSlow = 4;
inline void S_SLOWMOTION::clear_bslow() {
  bslow_ = false;
}
inline bool S_SLOWMOTION::_internal_bslow() const {
  return bslow_;
}
inline bool S_SLOWMOTION::bslow() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SLOWMOTION.bSlow)
  return _internal_bslow();
}
inline void S_SLOWMOTION::_internal_set_bslow(bool value) {
  
  bslow_ = value;
}
inline void S_SLOWMOTION::set_bslow(bool value) {
  _internal_set_bslow(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SLOWMOTION.bSlow)
}

// -------------------------------------------------------------------

// S_CAMSHAKE

// float fCamShake = 1;
inline void S_CAMSHAKE::clear_fcamshake() {
  fcamshake_ = 0;
}
inline float S_CAMSHAKE::_internal_fcamshake() const {
  return fcamshake_;
}
inline float S_CAMSHAKE::fcamshake() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CAMSHAKE.fCamShake)
  return _internal_fcamshake();
}
inline void S_CAMSHAKE::_internal_set_fcamshake(float value) {
  
  fcamshake_ = value;
}
inline void S_CAMSHAKE::set_fcamshake(float value) {
  _internal_set_fcamshake(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CAMSHAKE.fCamShake)
}

// float fShakeTime = 2;
inline void S_CAMSHAKE::clear_fshaketime() {
  fshaketime_ = 0;
}
inline float S_CAMSHAKE::_internal_fshaketime() const {
  return fshaketime_;
}
inline float S_CAMSHAKE::fshaketime() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CAMSHAKE.fShakeTime)
  return _internal_fshaketime();
}
inline void S_CAMSHAKE::_internal_set_fshaketime(float value) {
  
  fshaketime_ = value;
}
inline void S_CAMSHAKE::set_fshaketime(float value) {
  _internal_set_fshaketime(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CAMSHAKE.fShakeTime)
}

// -------------------------------------------------------------------

// S_EVENT

// int32 iEventID = 1;
inline void S_EVENT::clear_ieventid() {
  ieventid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_EVENT::_internal_ieventid() const {
  return ieventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_EVENT::ieventid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EVENT.iEventID)
  return _internal_ieventid();
}
inline void S_EVENT::_internal_set_ieventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ieventid_ = value;
}
inline void S_EVENT::set_ieventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ieventid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EVENT.iEventID)
}

// int32 iState = 2;
inline void S_EVENT::clear_istate() {
  istate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_EVENT::_internal_istate() const {
  return istate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_EVENT::istate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EVENT.iState)
  return _internal_istate();
}
inline void S_EVENT::_internal_set_istate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istate_ = value;
}
inline void S_EVENT::set_istate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istate(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EVENT.iState)
}

// -------------------------------------------------------------------

// S_SKILLEXPLOSION

// .Protocol.ObjectInfo tObject = 1;
inline bool S_SKILLEXPLOSION::_internal_has_tobject() const {
  return this != internal_default_instance() && tobject_ != nullptr;
}
inline bool S_SKILLEXPLOSION::has_tobject() const {
  return _internal_has_tobject();
}
inline const ::Protocol::ObjectInfo& S_SKILLEXPLOSION::_internal_tobject() const {
  const ::Protocol::ObjectInfo* p = tobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_SKILLEXPLOSION::tobject() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SKILLEXPLOSION.tObject)
  return _internal_tobject();
}
inline void S_SKILLEXPLOSION::unsafe_arena_set_allocated_tobject(
    ::Protocol::ObjectInfo* tobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tobject_);
  }
  tobject_ = tobject;
  if (tobject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SKILLEXPLOSION.tObject)
}
inline ::Protocol::ObjectInfo* S_SKILLEXPLOSION::release_tobject() {
  
  ::Protocol::ObjectInfo* temp = tobject_;
  tobject_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::ObjectInfo* S_SKILLEXPLOSION::unsafe_arena_release_tobject() {
  // @@protoc_insertion_point(field_release:Protocol.S_SKILLEXPLOSION.tObject)
  
  ::Protocol::ObjectInfo* temp = tobject_;
  tobject_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_SKILLEXPLOSION::_internal_mutable_tobject() {
  
  if (tobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    tobject_ = p;
  }
  return tobject_;
}
inline ::Protocol::ObjectInfo* S_SKILLEXPLOSION::mutable_tobject() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SKILLEXPLOSION.tObject)
  return _internal_mutable_tobject();
}
inline void S_SKILLEXPLOSION::set_allocated_tobject(::Protocol::ObjectInfo* tobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tobject_);
  }
  if (tobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tobject));
    if (message_arena != submessage_arena) {
      tobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tobject, submessage_arena);
    }
    
  } else {
    
  }
  tobject_ = tobject;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SKILLEXPLOSION.tObject)
}

// -------------------------------------------------------------------

// S_HP

// int32 iObjectID = 1;
inline void S_HP::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HP.iObjectID)
  return _internal_iobjectid();
}
inline void S_HP::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_HP::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HP.iObjectID)
}

// int32 iLevel = 2;
inline void S_HP::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HP.iLevel)
  return _internal_ilevel();
}
inline void S_HP::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_HP::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HP.iLevel)
}

// int32 iLayer = 3;
inline void S_HP::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HP.iLayer)
  return _internal_ilayer();
}
inline void S_HP::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_HP::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HP.iLayer)
}

// int32 iHP = 4;
inline void S_HP::clear_ihp() {
  ihp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::_internal_ihp() const {
  return ihp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_HP::ihp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HP.iHP)
  return _internal_ihp();
}
inline void S_HP::_internal_set_ihp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ihp_ = value;
}
inline void S_HP::set_ihp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ihp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_HP.iHP)
}

// -------------------------------------------------------------------

// S_CREATE_PLAYER

// int32 iObjectID = 1;
inline void S_CREATE_PLAYER::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.iObjectID)
  return _internal_iobjectid();
}
inline void S_CREATE_PLAYER::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_CREATE_PLAYER::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.iObjectID)
}

// int32 iLevel = 2;
inline void S_CREATE_PLAYER::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.iLevel)
  return _internal_ilevel();
}
inline void S_CREATE_PLAYER::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_CREATE_PLAYER::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.iLevel)
}

// int32 iClass = 3;
inline void S_CREATE_PLAYER::clear_iclass() {
  iclass_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::_internal_iclass() const {
  return iclass_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::iclass() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.iClass)
  return _internal_iclass();
}
inline void S_CREATE_PLAYER::_internal_set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iclass_ = value;
}
inline void S_CREATE_PLAYER::set_iclass(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iclass(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.iClass)
}

// bool bControll = 4;
inline void S_CREATE_PLAYER::clear_bcontroll() {
  bcontroll_ = false;
}
inline bool S_CREATE_PLAYER::_internal_bcontroll() const {
  return bcontroll_;
}
inline bool S_CREATE_PLAYER::bcontroll() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.bControll)
  return _internal_bcontroll();
}
inline void S_CREATE_PLAYER::_internal_set_bcontroll(bool value) {
  
  bcontroll_ = value;
}
inline void S_CREATE_PLAYER::set_bcontroll(bool value) {
  _internal_set_bcontroll(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.bControll)
}

// repeated float matWorld = 5 [packed = true];
inline int S_CREATE_PLAYER::_internal_matworld_size() const {
  return matworld_.size();
}
inline int S_CREATE_PLAYER::matworld_size() const {
  return _internal_matworld_size();
}
inline void S_CREATE_PLAYER::clear_matworld() {
  matworld_.Clear();
}
inline float S_CREATE_PLAYER::_internal_matworld(int index) const {
  return matworld_.Get(index);
}
inline float S_CREATE_PLAYER::matworld(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.matWorld)
  return _internal_matworld(index);
}
inline void S_CREATE_PLAYER::set_matworld(int index, float value) {
  matworld_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.matWorld)
}
inline void S_CREATE_PLAYER::_internal_add_matworld(float value) {
  matworld_.Add(value);
}
inline void S_CREATE_PLAYER::add_matworld(float value) {
  _internal_add_matworld(value);
  // @@protoc_insertion_point(field_add:Protocol.S_CREATE_PLAYER.matWorld)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_CREATE_PLAYER::_internal_matworld() const {
  return matworld_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_CREATE_PLAYER::matworld() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CREATE_PLAYER.matWorld)
  return _internal_matworld();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_CREATE_PLAYER::_internal_mutable_matworld() {
  return &matworld_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_CREATE_PLAYER::mutable_matworld() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CREATE_PLAYER.matWorld)
  return _internal_mutable_matworld();
}

// bytes strNickName = 6;
inline void S_CREATE_PLAYER::clear_strnickname() {
  strnickname_.ClearToEmpty();
}
inline const std::string& S_CREATE_PLAYER::strnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.strNickName)
  return _internal_strnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE_PLAYER::set_strnickname(ArgT0&& arg0, ArgT... args) {
 
 strnickname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.strNickName)
}
inline std::string* S_CREATE_PLAYER::mutable_strnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_PLAYER.strNickName)
  return _internal_mutable_strnickname();
}
inline const std::string& S_CREATE_PLAYER::_internal_strnickname() const {
  return strnickname_.Get();
}
inline void S_CREATE_PLAYER::_internal_set_strnickname(const std::string& value) {
  
  strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CREATE_PLAYER::_internal_mutable_strnickname() {
  
  return strnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CREATE_PLAYER::release_strnickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_PLAYER.strNickName)
  return strnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CREATE_PLAYER::set_allocated_strnickname(std::string* strnickname) {
  if (strnickname != nullptr) {
    
  } else {
    
  }
  strnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_PLAYER.strNickName)
}

// repeated float vTargetPos = 7 [packed = true];
inline int S_CREATE_PLAYER::_internal_vtargetpos_size() const {
  return vtargetpos_.size();
}
inline int S_CREATE_PLAYER::vtargetpos_size() const {
  return _internal_vtargetpos_size();
}
inline void S_CREATE_PLAYER::clear_vtargetpos() {
  vtargetpos_.Clear();
}
inline float S_CREATE_PLAYER::_internal_vtargetpos(int index) const {
  return vtargetpos_.Get(index);
}
inline float S_CREATE_PLAYER::vtargetpos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.vTargetPos)
  return _internal_vtargetpos(index);
}
inline void S_CREATE_PLAYER::set_vtargetpos(int index, float value) {
  vtargetpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.vTargetPos)
}
inline void S_CREATE_PLAYER::_internal_add_vtargetpos(float value) {
  vtargetpos_.Add(value);
}
inline void S_CREATE_PLAYER::add_vtargetpos(float value) {
  _internal_add_vtargetpos(value);
  // @@protoc_insertion_point(field_add:Protocol.S_CREATE_PLAYER.vTargetPos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_CREATE_PLAYER::_internal_vtargetpos() const {
  return vtargetpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_CREATE_PLAYER::vtargetpos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CREATE_PLAYER.vTargetPos)
  return _internal_vtargetpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_CREATE_PLAYER::_internal_mutable_vtargetpos() {
  return &vtargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_CREATE_PLAYER::mutable_vtargetpos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CREATE_PLAYER.vTargetPos)
  return _internal_mutable_vtargetpos();
}

// string strState = 8;
inline void S_CREATE_PLAYER::clear_strstate() {
  strstate_.ClearToEmpty();
}
inline const std::string& S_CREATE_PLAYER::strstate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.strState)
  return _internal_strstate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE_PLAYER::set_strstate(ArgT0&& arg0, ArgT... args) {
 
 strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.strState)
}
inline std::string* S_CREATE_PLAYER::mutable_strstate() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_PLAYER.strState)
  return _internal_mutable_strstate();
}
inline const std::string& S_CREATE_PLAYER::_internal_strstate() const {
  return strstate_.Get();
}
inline void S_CREATE_PLAYER::_internal_set_strstate(const std::string& value) {
  
  strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CREATE_PLAYER::_internal_mutable_strstate() {
  
  return strstate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CREATE_PLAYER::release_strstate() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_PLAYER.strState)
  return strstate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CREATE_PLAYER::set_allocated_strstate(std::string* strstate) {
  if (strstate != nullptr) {
    
  } else {
    
  }
  strstate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strstate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_PLAYER.strState)
}

// int32 iWeaponIndex = 9;
inline void S_CREATE_PLAYER::clear_iweaponindex() {
  iweaponindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::_internal_iweaponindex() const {
  return iweaponindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CREATE_PLAYER::iweaponindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_PLAYER.iWeaponIndex)
  return _internal_iweaponindex();
}
inline void S_CREATE_PLAYER::_internal_set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iweaponindex_ = value;
}
inline void S_CREATE_PLAYER::set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iweaponindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_PLAYER.iWeaponIndex)
}

// -------------------------------------------------------------------

// S_CHAT

// bytes szChat = 1;
inline void S_CHAT::clear_szchat() {
  szchat_.ClearToEmpty();
}
inline const std::string& S_CHAT::szchat() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.szChat)
  return _internal_szchat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_szchat(ArgT0&& arg0, ArgT... args) {
 
 szchat_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.szChat)
}
inline std::string* S_CHAT::mutable_szchat() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.szChat)
  return _internal_mutable_szchat();
}
inline const std::string& S_CHAT::_internal_szchat() const {
  return szchat_.Get();
}
inline void S_CHAT::_internal_set_szchat(const std::string& value) {
  
  szchat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_szchat() {
  
  return szchat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHAT::release_szchat() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.szChat)
  return szchat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHAT::set_allocated_szchat(std::string* szchat) {
  if (szchat != nullptr) {
    
  } else {
    
  }
  szchat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), szchat,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.szChat)
}

// -------------------------------------------------------------------

// S_MONSTERSTATE

// int32 iObjectID = 1;
inline void S_MONSTERSTATE::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTERSTATE.iObjectID)
  return _internal_iobjectid();
}
inline void S_MONSTERSTATE::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_MONSTERSTATE::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTERSTATE.iObjectID)
}

// int32 iLevel = 2;
inline void S_MONSTERSTATE::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTERSTATE.iLevel)
  return _internal_ilevel();
}
inline void S_MONSTERSTATE::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_MONSTERSTATE::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTERSTATE.iLevel)
}

// string strState = 3;
inline void S_MONSTERSTATE::clear_strstate() {
  strstate_.ClearToEmpty();
}
inline const std::string& S_MONSTERSTATE::strstate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTERSTATE.strState)
  return _internal_strstate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_MONSTERSTATE::set_strstate(ArgT0&& arg0, ArgT... args) {
 
 strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTERSTATE.strState)
}
inline std::string* S_MONSTERSTATE::mutable_strstate() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_MONSTERSTATE.strState)
  return _internal_mutable_strstate();
}
inline const std::string& S_MONSTERSTATE::_internal_strstate() const {
  return strstate_.Get();
}
inline void S_MONSTERSTATE::_internal_set_strstate(const std::string& value) {
  
  strstate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_MONSTERSTATE::_internal_mutable_strstate() {
  
  return strstate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_MONSTERSTATE::release_strstate() {
  // @@protoc_insertion_point(field_release:Protocol.S_MONSTERSTATE.strState)
  return strstate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_MONSTERSTATE::set_allocated_strstate(std::string* strstate) {
  if (strstate != nullptr) {
    
  } else {
    
  }
  strstate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strstate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MONSTERSTATE.strState)
}

// int32 iTargetObjectLayer = 4;
inline void S_MONSTERSTATE::clear_itargetobjectlayer() {
  itargetobjectlayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::_internal_itargetobjectlayer() const {
  return itargetobjectlayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::itargetobjectlayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTERSTATE.iTargetObjectLayer)
  return _internal_itargetobjectlayer();
}
inline void S_MONSTERSTATE::_internal_set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itargetobjectlayer_ = value;
}
inline void S_MONSTERSTATE::set_itargetobjectlayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itargetobjectlayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTERSTATE.iTargetObjectLayer)
}

// int32 iTargetObjectID = 5;
inline void S_MONSTERSTATE::clear_itargetobjectid() {
  itargetobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::_internal_itargetobjectid() const {
  return itargetobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_MONSTERSTATE::itargetobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTERSTATE.iTargetObjectID)
  return _internal_itargetobjectid();
}
inline void S_MONSTERSTATE::_internal_set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  itargetobjectid_ = value;
}
inline void S_MONSTERSTATE::set_itargetobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_itargetobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTERSTATE.iTargetObjectID)
}

// repeated float vTargetPos = 6 [packed = true];
inline int S_MONSTERSTATE::_internal_vtargetpos_size() const {
  return vtargetpos_.size();
}
inline int S_MONSTERSTATE::vtargetpos_size() const {
  return _internal_vtargetpos_size();
}
inline void S_MONSTERSTATE::clear_vtargetpos() {
  vtargetpos_.Clear();
}
inline float S_MONSTERSTATE::_internal_vtargetpos(int index) const {
  return vtargetpos_.Get(index);
}
inline float S_MONSTERSTATE::vtargetpos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_MONSTERSTATE.vTargetPos)
  return _internal_vtargetpos(index);
}
inline void S_MONSTERSTATE::set_vtargetpos(int index, float value) {
  vtargetpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_MONSTERSTATE.vTargetPos)
}
inline void S_MONSTERSTATE::_internal_add_vtargetpos(float value) {
  vtargetpos_.Add(value);
}
inline void S_MONSTERSTATE::add_vtargetpos(float value) {
  _internal_add_vtargetpos(value);
  // @@protoc_insertion_point(field_add:Protocol.S_MONSTERSTATE.vTargetPos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_MONSTERSTATE::_internal_vtargetpos() const {
  return vtargetpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S_MONSTERSTATE::vtargetpos() const {
  // @@protoc_insertion_point(field_list:Protocol.S_MONSTERSTATE.vTargetPos)
  return _internal_vtargetpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_MONSTERSTATE::_internal_mutable_vtargetpos() {
  return &vtargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S_MONSTERSTATE::mutable_vtargetpos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_MONSTERSTATE.vTargetPos)
  return _internal_mutable_vtargetpos();
}

// -------------------------------------------------------------------

// S_PLAYERLEVELMOVE

// int32 iCurrLevel = 1;
inline void S_PLAYERLEVELMOVE::clear_icurrlevel() {
  icurrlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_PLAYERLEVELMOVE::_internal_icurrlevel() const {
  return icurrlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_PLAYERLEVELMOVE::icurrlevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYERLEVELMOVE.iCurrLevel)
  return _internal_icurrlevel();
}
inline void S_PLAYERLEVELMOVE::_internal_set_icurrlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  icurrlevel_ = value;
}
inline void S_PLAYERLEVELMOVE::set_icurrlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_icurrlevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYERLEVELMOVE.iCurrLevel)
}

// int32 iNextLevel = 2;
inline void S_PLAYERLEVELMOVE::clear_inextlevel() {
  inextlevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_PLAYERLEVELMOVE::_internal_inextlevel() const {
  return inextlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_PLAYERLEVELMOVE::inextlevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PLAYERLEVELMOVE.iNextLevel)
  return _internal_inextlevel();
}
inline void S_PLAYERLEVELMOVE::_internal_set_inextlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inextlevel_ = value;
}
inline void S_PLAYERLEVELMOVE::set_inextlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inextlevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PLAYERLEVELMOVE.iNextLevel)
}

// -------------------------------------------------------------------

// S_DELETEGAMEOBJECT

// int32 iObjectID = 1;
inline void S_DELETEGAMEOBJECT::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETEGAMEOBJECT::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETEGAMEOBJECT::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETEGAMEOBJECT.iObjectID)
  return _internal_iobjectid();
}
inline void S_DELETEGAMEOBJECT::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_DELETEGAMEOBJECT::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DELETEGAMEOBJECT.iObjectID)
}

// int32 iLevel = 2;
inline void S_DELETEGAMEOBJECT::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETEGAMEOBJECT::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETEGAMEOBJECT::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETEGAMEOBJECT.iLevel)
  return _internal_ilevel();
}
inline void S_DELETEGAMEOBJECT::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_DELETEGAMEOBJECT::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DELETEGAMEOBJECT.iLevel)
}

// int32 iLayer = 3;
inline void S_DELETEGAMEOBJECT::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETEGAMEOBJECT::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_DELETEGAMEOBJECT::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DELETEGAMEOBJECT.iLayer)
  return _internal_ilayer();
}
inline void S_DELETEGAMEOBJECT::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_DELETEGAMEOBJECT::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DELETEGAMEOBJECT.iLayer)
}

// -------------------------------------------------------------------

// S_IDENTITY

// int32 iObjectID = 1;
inline void S_IDENTITY::clear_iobjectid() {
  iobjectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_IDENTITY.iObjectID)
  return _internal_iobjectid();
}
inline void S_IDENTITY::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iobjectid_ = value;
}
inline void S_IDENTITY::set_iobjectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_IDENTITY.iObjectID)
}

// int32 iLevel = 2;
inline void S_IDENTITY::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.S_IDENTITY.iLevel)
  return _internal_ilevel();
}
inline void S_IDENTITY::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void S_IDENTITY::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.S_IDENTITY.iLevel)
}

// int32 iLayer = 3;
inline void S_IDENTITY::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_IDENTITY.iLayer)
  return _internal_ilayer();
}
inline void S_IDENTITY::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void S_IDENTITY::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.S_IDENTITY.iLayer)
}

// int32 iWeaponIndex = 4;
inline void S_IDENTITY::clear_iweaponindex() {
  iweaponindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::_internal_iweaponindex() const {
  return iweaponindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_IDENTITY::iweaponindex() const {
  // @@protoc_insertion_point(field_get:Protocol.S_IDENTITY.iWeaponIndex)
  return _internal_iweaponindex();
}
inline void S_IDENTITY::_internal_set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iweaponindex_ = value;
}
inline void S_IDENTITY::set_iweaponindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iweaponindex(value);
  // @@protoc_insertion_point(field_set:Protocol.S_IDENTITY.iWeaponIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
