// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class BuffData;
struct BuffDataDefaultTypeInternal;
extern BuffDataDefaultTypeInternal _BuffData_default_instance_;
class ChildCollider;
struct ChildColliderDefaultTypeInternal;
extern ChildColliderDefaultTypeInternal _ChildCollider_default_instance_;
class MonsterCreateInfo;
struct MonsterCreateInfoDefaultTypeInternal;
extern MonsterCreateInfoDefaultTypeInternal _MonsterCreateInfo_default_instance_;
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class Time;
struct TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::BuffData* Arena::CreateMaybeMessage<::Protocol::BuffData>(Arena*);
template<> ::Protocol::ChildCollider* Arena::CreateMaybeMessage<::Protocol::ChildCollider>(Arena*);
template<> ::Protocol::MonsterCreateInfo* Arena::CreateMaybeMessage<::Protocol::MonsterCreateInfo>(Arena*);
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::Time* Arena::CreateMaybeMessage<::Protocol::Time>(Arena*);
template<> ::Protocol::UserInfo* Arena::CreateMaybeMessage<::Protocol::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class BuffData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.BuffData) */ {
 public:
  inline BuffData() : BuffData(nullptr) {}
  ~BuffData() override;
  explicit constexpr BuffData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BuffData(const BuffData& from);
  BuffData(BuffData&& from) noexcept
    : BuffData() {
    *this = ::std::move(from);
  }

  inline BuffData& operator=(const BuffData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuffData& operator=(BuffData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BuffData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BuffData* internal_default_instance() {
    return reinterpret_cast<const BuffData*>(
               &_BuffData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuffData& a, BuffData& b) {
    a.Swap(&b);
  }
  inline void Swap(BuffData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuffData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuffData* New() const final {
    return new BuffData();
  }

  BuffData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuffData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuffData& from);
  void MergeFrom(const BuffData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuffData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.BuffData";
  }
  protected:
  explicit BuffData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimsFieldNumber = 3,
    kBuffIdFieldNumber = 1,
    kRemainTimeFieldNumber = 2,
  };
  // repeated uint64 victims = 3;
  int victims_size() const;
  private:
  int _internal_victims_size() const;
  public:
  void clear_victims();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_victims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_victims() const;
  void _internal_add_victims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_victims();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 victims(int index) const;
  void set_victims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_victims(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      victims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_victims();

  // uint64 buffId = 1;
  void clear_buffid();
  ::PROTOBUF_NAMESPACE_ID::uint64 buffid() const;
  void set_buffid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_buffid() const;
  void _internal_set_buffid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float remainTime = 2;
  void clear_remaintime();
  float remaintime() const;
  void set_remaintime(float value);
  private:
  float _internal_remaintime() const;
  void _internal_set_remaintime(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.BuffData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > victims_;
  mutable std::atomic<int> _victims_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buffid_;
  float remaintime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Time final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Time) */ {
 public:
  inline Time() : Time(nullptr) {}
  ~Time() override;
  explicit constexpr Time(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Time& default_instance() {
    return *internal_default_instance();
  }
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return new Time();
  }

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIMinuteFieldNumber = 1,
    kFSecondFieldNumber = 2,
  };
  // uint32 iMinute = 1;
  void clear_iminute();
  ::PROTOBUF_NAMESPACE_ID::uint32 iminute() const;
  void set_iminute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iminute() const;
  void _internal_set_iminute(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float fSecond = 2;
  void clear_fsecond();
  float fsecond() const;
  void set_fsecond(float value);
  private:
  float _internal_fsecond() const;
  void _internal_set_fsecond(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iminute_;
  float fsecond_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit constexpr ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectInfo* New() const final {
    return new ObjectInfo();
  }

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectInfo& from);
  void MergeFrom(const ObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVTargetPosFieldNumber = 4,
    kMatWorldFieldNumber = 5,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
  };
  // repeated float vTargetPos = 4 [packed = true];
  int vtargetpos_size() const;
  private:
  int _internal_vtargetpos_size() const;
  public:
  void clear_vtargetpos();
  private:
  float _internal_vtargetpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vtargetpos() const;
  void _internal_add_vtargetpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vtargetpos();
  public:
  float vtargetpos(int index) const;
  void set_vtargetpos(int index, float value);
  void add_vtargetpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vtargetpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vtargetpos();

  // repeated float matWorld = 5 [packed = true];
  int matworld_size() const;
  private:
  int _internal_matworld_size() const;
  public:
  void clear_matworld();
  private:
  float _internal_matworld(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_matworld() const;
  void _internal_add_matworld(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_matworld();
  public:
  float matworld(int index) const;
  void set_matworld(int index, float value);
  void add_matworld(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      matworld() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_matworld();

  // uint32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vtargetpos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > matworld_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit constexpr UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return new UserInfo();
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNickNameFieldNumber = 1,
    kStrCharacterFieldNumber = 2,
    kBReadyFieldNumber = 3,
  };
  // string strNickName = 1;
  void clear_strnickname();
  const std::string& strnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strnickname();
  void set_allocated_strnickname(std::string* strnickname);
  private:
  const std::string& _internal_strnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strnickname(const std::string& value);
  std::string* _internal_mutable_strnickname();
  public:

  // string strCharacter = 2;
  void clear_strcharacter();
  const std::string& strcharacter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strcharacter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strcharacter();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_strcharacter();
  void set_allocated_strcharacter(std::string* strcharacter);
  private:
  const std::string& _internal_strcharacter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcharacter(const std::string& value);
  std::string* _internal_mutable_strcharacter();
  public:

  // bool bReady = 3;
  void clear_bready();
  bool bready() const;
  void set_bready(bool value);
  private:
  bool _internal_bready() const;
  void _internal_set_bready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strnickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcharacter_;
  bool bready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ChildCollider final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ChildCollider) */ {
 public:
  inline ChildCollider() : ChildCollider(nullptr) {}
  ~ChildCollider() override;
  explicit constexpr ChildCollider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChildCollider(const ChildCollider& from);
  ChildCollider(ChildCollider&& from) noexcept
    : ChildCollider() {
    *this = ::std::move(from);
  }

  inline ChildCollider& operator=(const ChildCollider& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChildCollider& operator=(ChildCollider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChildCollider& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChildCollider* internal_default_instance() {
    return reinterpret_cast<const ChildCollider*>(
               &_ChildCollider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChildCollider& a, ChildCollider& b) {
    a.Swap(&b);
  }
  inline void Swap(ChildCollider* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChildCollider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChildCollider* New() const final {
    return new ChildCollider();
  }

  ChildCollider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChildCollider>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChildCollider& from);
  void MergeFrom(const ChildCollider& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChildCollider* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ChildCollider";
  }
  protected:
  explicit ChildCollider(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVOffsetFieldNumber = 1,
    kVScaleFieldNumber = 2,
  };
  // repeated float vOffset = 1 [packed = true];
  int voffset_size() const;
  private:
  int _internal_voffset_size() const;
  public:
  void clear_voffset();
  private:
  float _internal_voffset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_voffset() const;
  void _internal_add_voffset(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_voffset();
  public:
  float voffset(int index) const;
  void set_voffset(int index, float value);
  void add_voffset(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      voffset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_voffset();

  // repeated float vScale = 2 [packed = true];
  int vscale_size() const;
  private:
  int _internal_vscale_size() const;
  public:
  void clear_vscale();
  private:
  float _internal_vscale(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vscale() const;
  void _internal_add_vscale(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vscale();
  public:
  float vscale(int index) const;
  void set_vscale(int index, float value);
  void add_vscale(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vscale() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vscale();

  // @@protoc_insertion_point(class_scope:Protocol.ChildCollider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > voffset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vscale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterCreateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterCreateInfo) */ {
 public:
  inline MonsterCreateInfo() : MonsterCreateInfo(nullptr) {}
  ~MonsterCreateInfo() override;
  explicit constexpr MonsterCreateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterCreateInfo(const MonsterCreateInfo& from);
  MonsterCreateInfo(MonsterCreateInfo&& from) noexcept
    : MonsterCreateInfo() {
    *this = ::std::move(from);
  }

  inline MonsterCreateInfo& operator=(const MonsterCreateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterCreateInfo& operator=(MonsterCreateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterCreateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterCreateInfo* internal_default_instance() {
    return reinterpret_cast<const MonsterCreateInfo*>(
               &_MonsterCreateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MonsterCreateInfo& a, MonsterCreateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterCreateInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterCreateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MonsterCreateInfo* New() const final {
    return new MonsterCreateInfo();
  }

  MonsterCreateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MonsterCreateInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MonsterCreateInfo& from);
  void MergeFrom(const MonsterCreateInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterCreateInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterCreateInfo";
  }
  protected:
  explicit MonsterCreateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFFollowDistanceFieldNumber = 1,
  };
  // float fFollowDistance = 1;
  void clear_ffollowdistance();
  float ffollowdistance() const;
  void set_ffollowdistance(float value);
  private:
  float _internal_ffollowdistance() const;
  void _internal_set_ffollowdistance(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterCreateInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float ffollowdistance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuffData

// uint64 buffId = 1;
inline void BuffData::clear_buffid() {
  buffid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuffData::_internal_buffid() const {
  return buffid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuffData::buffid() const {
  // @@protoc_insertion_point(field_get:Protocol.BuffData.buffId)
  return _internal_buffid();
}
inline void BuffData::_internal_set_buffid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  buffid_ = value;
}
inline void BuffData::set_buffid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_buffid(value);
  // @@protoc_insertion_point(field_set:Protocol.BuffData.buffId)
}

// float remainTime = 2;
inline void BuffData::clear_remaintime() {
  remaintime_ = 0;
}
inline float BuffData::_internal_remaintime() const {
  return remaintime_;
}
inline float BuffData::remaintime() const {
  // @@protoc_insertion_point(field_get:Protocol.BuffData.remainTime)
  return _internal_remaintime();
}
inline void BuffData::_internal_set_remaintime(float value) {
  
  remaintime_ = value;
}
inline void BuffData::set_remaintime(float value) {
  _internal_set_remaintime(value);
  // @@protoc_insertion_point(field_set:Protocol.BuffData.remainTime)
}

// repeated uint64 victims = 3;
inline int BuffData::_internal_victims_size() const {
  return victims_.size();
}
inline int BuffData::victims_size() const {
  return _internal_victims_size();
}
inline void BuffData::clear_victims() {
  victims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuffData::_internal_victims(int index) const {
  return victims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuffData::victims(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.BuffData.victims)
  return _internal_victims(index);
}
inline void BuffData::set_victims(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  victims_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.BuffData.victims)
}
inline void BuffData::_internal_add_victims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  victims_.Add(value);
}
inline void BuffData::add_victims(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_victims(value);
  // @@protoc_insertion_point(field_add:Protocol.BuffData.victims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BuffData::_internal_victims() const {
  return victims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
BuffData::victims() const {
  // @@protoc_insertion_point(field_list:Protocol.BuffData.victims)
  return _internal_victims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BuffData::_internal_mutable_victims() {
  return &victims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
BuffData::mutable_victims() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.BuffData.victims)
  return _internal_mutable_victims();
}

// -------------------------------------------------------------------

// Time

// uint32 iMinute = 1;
inline void Time::clear_iminute() {
  iminute_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time::_internal_iminute() const {
  return iminute_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Time::iminute() const {
  // @@protoc_insertion_point(field_get:Protocol.Time.iMinute)
  return _internal_iminute();
}
inline void Time::_internal_set_iminute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iminute_ = value;
}
inline void Time::set_iminute(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iminute(value);
  // @@protoc_insertion_point(field_set:Protocol.Time.iMinute)
}

// float fSecond = 2;
inline void Time::clear_fsecond() {
  fsecond_ = 0;
}
inline float Time::_internal_fsecond() const {
  return fsecond_;
}
inline float Time::fsecond() const {
  // @@protoc_insertion_point(field_get:Protocol.Time.fSecond)
  return _internal_fsecond();
}
inline void Time::_internal_set_fsecond(float value) {
  
  fsecond_ = value;
}
inline void Time::set_fsecond(float value) {
  _internal_set_fsecond(value);
  // @@protoc_insertion_point(field_set:Protocol.Time.fSecond)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint32 iObjectID = 1;
inline void ObjectInfo::clear_iobjectid() {
  iobjectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.iObjectID)
  return _internal_iobjectid();
}
inline void ObjectInfo::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iobjectid_ = value;
}
inline void ObjectInfo::set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.iObjectID)
}

// int32 iLevel = 2;
inline void ObjectInfo::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.iLevel)
  return _internal_ilevel();
}
inline void ObjectInfo::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void ObjectInfo::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.iLevel)
}

// int32 iLayer = 3;
inline void ObjectInfo::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.iLayer)
  return _internal_ilayer();
}
inline void ObjectInfo::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void ObjectInfo::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.iLayer)
}

// repeated float vTargetPos = 4 [packed = true];
inline int ObjectInfo::_internal_vtargetpos_size() const {
  return vtargetpos_.size();
}
inline int ObjectInfo::vtargetpos_size() const {
  return _internal_vtargetpos_size();
}
inline void ObjectInfo::clear_vtargetpos() {
  vtargetpos_.Clear();
}
inline float ObjectInfo::_internal_vtargetpos(int index) const {
  return vtargetpos_.Get(index);
}
inline float ObjectInfo::vtargetpos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.vTargetPos)
  return _internal_vtargetpos(index);
}
inline void ObjectInfo::set_vtargetpos(int index, float value) {
  vtargetpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.vTargetPos)
}
inline void ObjectInfo::_internal_add_vtargetpos(float value) {
  vtargetpos_.Add(value);
}
inline void ObjectInfo::add_vtargetpos(float value) {
  _internal_add_vtargetpos(value);
  // @@protoc_insertion_point(field_add:Protocol.ObjectInfo.vTargetPos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::_internal_vtargetpos() const {
  return vtargetpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::vtargetpos() const {
  // @@protoc_insertion_point(field_list:Protocol.ObjectInfo.vTargetPos)
  return _internal_vtargetpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::_internal_mutable_vtargetpos() {
  return &vtargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::mutable_vtargetpos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ObjectInfo.vTargetPos)
  return _internal_mutable_vtargetpos();
}

// repeated float matWorld = 5 [packed = true];
inline int ObjectInfo::_internal_matworld_size() const {
  return matworld_.size();
}
inline int ObjectInfo::matworld_size() const {
  return _internal_matworld_size();
}
inline void ObjectInfo::clear_matworld() {
  matworld_.Clear();
}
inline float ObjectInfo::_internal_matworld(int index) const {
  return matworld_.Get(index);
}
inline float ObjectInfo::matworld(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.matWorld)
  return _internal_matworld(index);
}
inline void ObjectInfo::set_matworld(int index, float value) {
  matworld_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.matWorld)
}
inline void ObjectInfo::_internal_add_matworld(float value) {
  matworld_.Add(value);
}
inline void ObjectInfo::add_matworld(float value) {
  _internal_add_matworld(value);
  // @@protoc_insertion_point(field_add:Protocol.ObjectInfo.matWorld)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::_internal_matworld() const {
  return matworld_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::matworld() const {
  // @@protoc_insertion_point(field_list:Protocol.ObjectInfo.matWorld)
  return _internal_matworld();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::_internal_mutable_matworld() {
  return &matworld_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::mutable_matworld() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ObjectInfo.matWorld)
  return _internal_mutable_matworld();
}

// -------------------------------------------------------------------

// UserInfo

// string strNickName = 1;
inline void UserInfo::clear_strnickname() {
  strnickname_.ClearToEmpty();
}
inline const std::string& UserInfo::strnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.UserInfo.strNickName)
  return _internal_strnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_strnickname(ArgT0&& arg0, ArgT... args) {
 
 strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserInfo.strNickName)
}
inline std::string* UserInfo::mutable_strnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.UserInfo.strNickName)
  return _internal_mutable_strnickname();
}
inline const std::string& UserInfo::_internal_strnickname() const {
  return strnickname_.Get();
}
inline void UserInfo::_internal_set_strnickname(const std::string& value) {
  
  strnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_strnickname() {
  
  return strnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_strnickname() {
  // @@protoc_insertion_point(field_release:Protocol.UserInfo.strNickName)
  return strnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_strnickname(std::string* strnickname) {
  if (strnickname != nullptr) {
    
  } else {
    
  }
  strnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserInfo.strNickName)
}

// string strCharacter = 2;
inline void UserInfo::clear_strcharacter() {
  strcharacter_.ClearToEmpty();
}
inline const std::string& UserInfo::strcharacter() const {
  // @@protoc_insertion_point(field_get:Protocol.UserInfo.strCharacter)
  return _internal_strcharacter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_strcharacter(ArgT0&& arg0, ArgT... args) {
 
 strcharacter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserInfo.strCharacter)
}
inline std::string* UserInfo::mutable_strcharacter() {
  // @@protoc_insertion_point(field_mutable:Protocol.UserInfo.strCharacter)
  return _internal_mutable_strcharacter();
}
inline const std::string& UserInfo::_internal_strcharacter() const {
  return strcharacter_.Get();
}
inline void UserInfo::_internal_set_strcharacter(const std::string& value) {
  
  strcharacter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_strcharacter() {
  
  return strcharacter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserInfo::release_strcharacter() {
  // @@protoc_insertion_point(field_release:Protocol.UserInfo.strCharacter)
  return strcharacter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserInfo::set_allocated_strcharacter(std::string* strcharacter) {
  if (strcharacter != nullptr) {
    
  } else {
    
  }
  strcharacter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strcharacter,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserInfo.strCharacter)
}

// bool bReady = 3;
inline void UserInfo::clear_bready() {
  bready_ = false;
}
inline bool UserInfo::_internal_bready() const {
  return bready_;
}
inline bool UserInfo::bready() const {
  // @@protoc_insertion_point(field_get:Protocol.UserInfo.bReady)
  return _internal_bready();
}
inline void UserInfo::_internal_set_bready(bool value) {
  
  bready_ = value;
}
inline void UserInfo::set_bready(bool value) {
  _internal_set_bready(value);
  // @@protoc_insertion_point(field_set:Protocol.UserInfo.bReady)
}

// -------------------------------------------------------------------

// ChildCollider

// repeated float vOffset = 1 [packed = true];
inline int ChildCollider::_internal_voffset_size() const {
  return voffset_.size();
}
inline int ChildCollider::voffset_size() const {
  return _internal_voffset_size();
}
inline void ChildCollider::clear_voffset() {
  voffset_.Clear();
}
inline float ChildCollider::_internal_voffset(int index) const {
  return voffset_.Get(index);
}
inline float ChildCollider::voffset(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ChildCollider.vOffset)
  return _internal_voffset(index);
}
inline void ChildCollider::set_voffset(int index, float value) {
  voffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.ChildCollider.vOffset)
}
inline void ChildCollider::_internal_add_voffset(float value) {
  voffset_.Add(value);
}
inline void ChildCollider::add_voffset(float value) {
  _internal_add_voffset(value);
  // @@protoc_insertion_point(field_add:Protocol.ChildCollider.vOffset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChildCollider::_internal_voffset() const {
  return voffset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChildCollider::voffset() const {
  // @@protoc_insertion_point(field_list:Protocol.ChildCollider.vOffset)
  return _internal_voffset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChildCollider::_internal_mutable_voffset() {
  return &voffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChildCollider::mutable_voffset() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ChildCollider.vOffset)
  return _internal_mutable_voffset();
}

// repeated float vScale = 2 [packed = true];
inline int ChildCollider::_internal_vscale_size() const {
  return vscale_.size();
}
inline int ChildCollider::vscale_size() const {
  return _internal_vscale_size();
}
inline void ChildCollider::clear_vscale() {
  vscale_.Clear();
}
inline float ChildCollider::_internal_vscale(int index) const {
  return vscale_.Get(index);
}
inline float ChildCollider::vscale(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ChildCollider.vScale)
  return _internal_vscale(index);
}
inline void ChildCollider::set_vscale(int index, float value) {
  vscale_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.ChildCollider.vScale)
}
inline void ChildCollider::_internal_add_vscale(float value) {
  vscale_.Add(value);
}
inline void ChildCollider::add_vscale(float value) {
  _internal_add_vscale(value);
  // @@protoc_insertion_point(field_add:Protocol.ChildCollider.vScale)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChildCollider::_internal_vscale() const {
  return vscale_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ChildCollider::vscale() const {
  // @@protoc_insertion_point(field_list:Protocol.ChildCollider.vScale)
  return _internal_vscale();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChildCollider::_internal_mutable_vscale() {
  return &vscale_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ChildCollider::mutable_vscale() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ChildCollider.vScale)
  return _internal_mutable_vscale();
}

// -------------------------------------------------------------------

// MonsterCreateInfo

// float fFollowDistance = 1;
inline void MonsterCreateInfo::clear_ffollowdistance() {
  ffollowdistance_ = 0;
}
inline float MonsterCreateInfo::_internal_ffollowdistance() const {
  return ffollowdistance_;
}
inline float MonsterCreateInfo::ffollowdistance() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterCreateInfo.fFollowDistance)
  return _internal_ffollowdistance();
}
inline void MonsterCreateInfo::_internal_set_ffollowdistance(float value) {
  
  ffollowdistance_ = value;
}
inline void MonsterCreateInfo::set_ffollowdistance(float value) {
  _internal_set_ffollowdistance(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterCreateInfo.fFollowDistance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
